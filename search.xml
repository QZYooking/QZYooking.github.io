<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Andorid封装之WebActivity</title>
    <url>/dev/190429-webActivity.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ol>
<li><p>为什么要封装</p>
<p>——封装代码的主要目的是屏蔽代码的复杂度，提升代码的可阅读性。<br>原先的WebActivity都是根据功能模块不同而新建不同的Activity，且之间没有一个统一的BaseWebActivity进行控制，使得代码出现极高的重复，如果功能需要统一修改时，重复的代码会导致极高的维护成本。<br>所以我们需要将功能相似的代码进行封装，减少重复代码。<a id="more"></a></p>
</li>
<li><p>如果将所有Web页面交给一个WebActivity控制</p>
<p>原项目中WebActivity的类（项目结构）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.xxx.web</span><br><span class="line">    --<span class="class"><span class="keyword">class</span> <span class="title">CantBackWebView</span></span>&#123;&#125;</span><br><span class="line">    --<span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceWebView</span></span>&#123;&#125;</span><br><span class="line">    --<span class="class"><span class="keyword">class</span> <span class="title">DefaultWebView</span></span>&#123;&#125;</span><br><span class="line">    --<span class="class"><span class="keyword">class</span> <span class="title">HealthAssessmentWebView</span></span>&#123;&#125;</span><br><span class="line">    --<span class="class"><span class="keyword">class</span> <span class="title">HealthBodyCheck2WebView</span></span>&#123;&#125;</span><br><span class="line">    --<span class="class"><span class="keyword">class</span> <span class="title">HealthBodyCheckWebView</span></span>&#123;&#125;</span><br><span class="line">    --<span class="class"><span class="keyword">class</span> <span class="title">HealthEncyclopediaWebView</span></span>&#123;&#125;</span><br><span class="line">    --<span class="class"><span class="keyword">class</span> <span class="title">HealthFileWebView</span></span>&#123;&#125;</span><br><span class="line">    --<span class="class"><span class="keyword">class</span> <span class="title">HealthInfoWebView</span></span>&#123;&#125;</span><br><span class="line">    --<span class="class"><span class="keyword">class</span> <span class="title">OrederWebView</span></span>&#123;&#125;</span><br><span class="line">    --<span class="class"><span class="keyword">class</span> <span class="title">QuestionWebView</span></span>&#123;&#125;</span><br><span class="line">    --<span class="class"><span class="keyword">class</span> <span class="title">RegistrationWebView</span></span>&#123;&#125;</span><br><span class="line">    --<span class="class"><span class="keyword">class</span> <span class="title">ReportQueryWebView</span></span>&#123;&#125;</span><br><span class="line">    --<span class="class"><span class="keyword">class</span> <span class="title">WxPayWebView</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>如果仅仅是把这些WebActivity都交给同一个WebActivity控制行不行？<br>WebView中不止有定位、获取图片等通用功能，还有不同的<code>evaluateJavascript</code>和<code>@JavascriptInterface</code>等交互方法，H5与Android代码的<strong>耦合度</strong>很高，如果轻易把他们杂糅在一起，代码会十分的臃肿。<br>而这臃肿的代码放在同一个页面，其必将导致<strong>逻辑的最终混乱</strong>，这是毋庸置疑的。</p>
</li>
<li><p>所以有如下认识：<strong>封装可能不会让你的代码更少（甚至更多），但必然更整洁、清晰，更方便调用。</strong></p>
</li>
</ol>
<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><ul>
<li>创建这个项目是为了让WebActivit的书写简化，并增强代码逻辑性和易读性</li>
<li>我希望这是一个具有普适性的项目，而不是仅为了当前项目而去实现它</li>
</ul>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.yooking.webviewutils</span><br><span class="line">    -<span class="class"><span class="keyword">class</span> <span class="title">BaseWebView</span></span>&#123;&#125;</span><br><span class="line">    -<span class="class"><span class="keyword">class</span> <span class="title">ImageWebView</span></span>&#123;&#125;</span><br><span class="line">    -<span class="class"><span class="keyword">class</span> <span class="title">LocationWebView</span></span>&#123;&#125;</span><br><span class="line">    -.callback</span><br><span class="line">    	--<span class="class"><span class="keyword">interface</span> <span class="title">LoadingCallback</span></span>&#123;&#125;</span><br><span class="line">    	--<span class="class"><span class="keyword">interface</span> <span class="title">LocationCallback</span></span>&#123;&#125;</span><br><span class="line">    	--<span class="class"><span class="keyword">interface</span> <span class="title">PermissionCallback</span></span>&#123;&#125;</span><br><span class="line">    -.tools</span><br><span class="line">    	--<span class="class"><span class="keyword">class</span> <span class="title">GPSUtil</span></span>&#123;&#125;</span><br><span class="line">        --<span class="class"><span class="keyword">class</span> <span class="title">ImageChooser</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><code>LoadingCallback</code>、<code>LocationCallback</code>、<code>PermissionCallback</code>为<code>interface</code>类<ul>
<li>LoadingCallback负责项目核心逻辑回调  </li>
<li>LocationCallback负责项目定位逻辑回调  </li>
<li>PermissionCallback负责项目权限逻辑回调 </li>
</ul>
</li>
<li><code>BaseWebView</code>、<code>ImageWebView</code>、<code>LocationWebView</code>为<code>abstract</code>类</li>
<li>余者为工具类</li>
</ol>
<h2 id="走进项目"><a href="#走进项目" class="headerlink" title="走进项目"></a>走进项目</h2><ol>
<li><p>先来看逻辑类：<code>LocationWebView.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定位逻辑</span></span><br><span class="line"><span class="comment"> * create by yooking on 2019/4/24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LocationWebView</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PERMISSION_LOCATION = <span class="string">"android.permission.ACCESS_FINE_LOCATION"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">checkPermission</span><span class="params">(PermissionCallback callback)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">checkLocation</span><span class="params">(LocationCallback callback)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startLocation</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>总共三个方法：  </p>
<ul>
<li><p>权限判定 <code>checkPermission</code>：abstract方法，继承者必须实现</p>
</li>
<li><p>定位判定 <code>checkLocation</code>：同上</p>
</li>
<li><p>开启定位 <code>startLocation</code>：定位逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startLocation</span><span class="params">()</span></span>&#123;</span><br><span class="line">    checkPermission(<span class="keyword">new</span> PermissionCallback()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">allowPermission</span><span class="params">(String... permissions)</span></span>&#123;...&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refusePermissions</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>当用户允许定位权限时调用<code>checkLocation</code>方法进行定位<br><strong><code>ImageWebView</code>与<code>LocationWebView</code>一致</strong><br>在<code>BaseWebView</code>中如何使用这两个abstract类呢？<br>答案是使用多继承方案，请看  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*多继承组件 —— 定位组件*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Location</span> <span class="keyword">extends</span> <span class="title">LocationWebView</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkPermission</span><span class="params">(PermissionCallback callback)</span></span>&#123;</span><br><span class="line">        checkLocationPermission(callback);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkLocation</span><span class="params">(LocationCallback callback)</span></span>&#123;</span><br><span class="line">        BaseWebView.<span class="keyword">this</span>.checkLocation(callback);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startLocation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.startLocation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p>在<code>BaseWebView</code>中新建内部类，内部类重写<code>LocationWebView</code>中的方法，该方法调用BaseWebView中相应的方法，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 授权定位权限</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">checkLocationgPermission</span><span class="params">(PermissionCallback callback)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定位功能实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">checkLocation</span><span class="params">(LocationCallback callback)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * H5调用定位功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startLocation</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">new</span> Location().startLocation();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="5">
<li><p>至此<code>BaseWebView</code>中关于定位功能的封装完毕<br>同理可得<code>ImageWebView</code>的封装<br>当然，在BaseWebView中也封装了诸如报错回调、基础WebSettings设定等……<br><strong>接下来自然是工具类了</strong><br><code>GPSUtil</code> ： 这个工具类封装了坐标系的转换，这里就不一一赘述了<br><code>ImageChooser</code> ： 这个工具类封装了打开相机/相册的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goPhotoAlbum</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//激活相册</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goCamera</span><span class="params">(String appId)</span></span>&#123;&#125; <span class="comment">//激活相机</span></span><br><span class="line"><span class="comment">//在onActivityResult中的onActivityResult(int requestCode, int resultCode, Intent data)回调</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="实战使用"><a href="#实战使用" class="headerlink" title="实战使用"></a>实战使用</h2><ol>
<li><p>继承BaseWebActivity,重写方法如下:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span> setContentView():void <span class="comment">//设置contentView</span></span><br><span class="line"><span class="meta">@Override</span> getWebViewId():int <span class="comment">//获取WebView的Id</span></span><br><span class="line"><span class="meta">@Override</span> initView():void <span class="comment">//用于处理View</span></span><br><span class="line"><span class="meta">@Override</span> loadingListener():LoadingCallback <span class="comment">//</span></span><br><span class="line"><span class="meta">@Override</span> checkLocationPermission(permissionCallback:PermissionCallback):void <span class="comment">//用于处理定位权限问题</span></span><br><span class="line"><span class="meta">@Override</span> checkLocation(locationCallback:LocationCallback):void <span class="comment">//用于处理定位的获取</span></span><br><span class="line"><span class="meta">@Override</span> checkPhotoPermission(permissionCallback:PermissionCallback):void <span class="comment">//用于处理相机权限问题</span></span><br><span class="line"><span class="meta">@Override</span> takePhoto:void <span class="comment">//用于处理相机的启用</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p><code>LoadingListener</code>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoadingCallback</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监测web页面的title标签变化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">titleChanged</span><span class="params">(String title)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用自定义协议的处理方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">diyScheme</span><span class="params">(Uri uri)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * H5页面报错的处理方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hasError</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载成功时的回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">isLoadSuccess</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面未开启前的回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onPageStart</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面渲染结束的回调  </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onPageFinish</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="3">
<li><p>如果引用了工具类中的打开相机方法，需要新建一个FileProvider</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"android.support.v4.content.FileProvider"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">android:authorities</span>=<span class="string">"$&#123;applicationId&#125;.fileprovider"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:grantUriPermission</span>=<span class="string">"truee"</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">android:name</span>=<span class="string">"android.support.FILE_PROVIDER_PATHS"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">android:resource</span>=<span class="string">"@xml/file_paths"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p> 项目地址：https://<br> 代码乱写，文章一般，谢谢耐心观看，希望能对你有所启发</p>
]]></content>
      <categories>
        <category>想丶把代码写出诗意</category>
      </categories>
      <tags>
        <tag>Dev</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android release包Home键重启问题</title>
    <url>/dev/190806-home-Restart.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="BUG描述"><a href="#BUG描述" class="headerlink" title="BUG描述"></a>BUG描述</h1><ol>
<li><p><strong>操作流程</strong>：打release包——安装apk——点选“打开”按钮——点Home键——点桌面图标</p>
</li>
<li><p><strong>现象</strong>：App重启<a id="more"></a></p>
</li>
<li><p><strong>原理分析及分析过程</strong>：</p>
<ul>
<li><p><strong>比较</strong>【安装apk直接打开】时的intent和【桌面图标打开】的intent的区别</p>
<p><strong>直接打开：</strong>（Logcat直接搜索<code>I/ActivityManager: START u0</code>）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">I/ActivityManager: START u0 </span><br><span class="line">&#123;</span><br><span class="line">  act=android.intent.action.MAIN</span><br><span class="line">  cat=[android.intent.category.LAUNCHER]</span><br><span class="line">  flg=0x10000000</span><br><span class="line">  pkg=com.yooking.test</span><br><span class="line">  cmp=com.yooking.test/.SplashActivity</span><br><span class="line">&#125;</span><br><span class="line">from uid 10039</span><br></pre></td></tr></table></figure>

<p><strong>桌面图标打开：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">I/ActivityManager: START u0 </span><br><span class="line">&#123;</span><br><span class="line">  act=android.intent.action.MAIN</span><br><span class="line">  cat=[android.intent.category.LAUNCHER]</span><br><span class="line">  flg=0x10200000</span><br><span class="line">  cmp=com.yooking.test/.SplashActivity</span><br><span class="line">  bnds=[856,662][1067,951]</span><br><span class="line">&#125;</span><br><span class="line">from uid 10068</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>对比结果：</strong>显然【桌面图标打开】时比【安装apk直接打开】少了一条pkg，多了一条bnds（pkg即Package，bnds即SourceBounds）</p>
</li>
<li><p><strong>猜测：</strong>怀疑bug的原因是pkg导致，那就模拟下呗：（红波浪线是因为@IntDef）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setClickListener(findViewById(R.id.button),(view)-&gt;&#123;<span class="comment">//模拟直接打开</span></span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);<span class="comment">//act</span></span><br><span class="line">    intent.addCategory(Intent.CATEGORY_LAUNCHER);<span class="comment">//cat</span></span><br><span class="line">    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));<span class="comment">//flg 0x10000000</span></span><br><span class="line">    intent.setPackage(<span class="string">"com.yooking.test"</span>);<span class="comment">//pkg</span></span><br><span class="line">    ComponentName cmp = ComponentName.unflattenFromString(<span class="string">"com.yooking.test/.SplashActivity"</span>);</span><br><span class="line">    intent.setComponent(<span class="keyword">new</span> ComponentName());<span class="comment">//cmp</span></span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line">setClickListener(findViewById(R.id.button),(view)-&gt;&#123;<span class="comment">//模拟桌面打开</span></span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);<span class="comment">//act</span></span><br><span class="line">    intent.addCategory(Intent.CATEGORY_LAUNCHER);<span class="comment">//cat</span></span><br><span class="line">    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK|Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED));<span class="comment">//flg 0x10200000</span></span><br><span class="line">    ComponentName cmp = ComponentName.unflattenFromString(<span class="string">"com.yooking.test/.SplashActivity"</span>);</span><br><span class="line">    intent.setComponent(<span class="keyword">new</span> ComponentName());<span class="comment">//cmp</span></span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>结论：</strong>模拟结果与猜测一致，带有pkg参数的意图跳转时，点home键确实会出现app重启现象</p>
</li>
</ul>
</li>
</ol>
<h1 id="解决BUG"><a href="#解决BUG" class="headerlink" title="解决BUG"></a>解决BUG</h1><ol>
<li><p>bug的成因分析出来了，如何解决？</p>
<p>根据前述分析，我们认为BUG出现的原因是Android手机下载app后直接打开时所传参数比桌面图标打开多了一个pkg导致的。</p>
</li>
<li><p><strong>解决方案1：</strong>莽过去！<br>什么叫莽过去？就是直截了当，干脆利落，你不是多传了个pkg吗，那我<em>把你关了，再自己启动一个</em>不就行了？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> firstStart</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(firstStart)&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);</span><br><span class="line">        intent.addCategory(Intent.CATEGORY_LAUNCHER);</span><br><span class="line">        intent.setComponent(<span class="keyword">new</span> ComponentName(BuildConfig.APPLICATION_ID,SplashActivity<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        intent.addFlags(<span class="number">0x10200000</span>);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>just look 挺 perfect 的…事实上嘛…<strong>就当无事发生好了…</strong><br>原因：带pkg和不带pkg被认为非同一应用，故而继续启动了Splash页面</p>
</li>
<li><p><strong>解决方案2：</strong>分析BUG现象，根据现象解决问题<br>目标是什么：App启动不重启<br>不重启意味着什么：点击Home键时的Activity回归任务栈顶部</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">任务栈：GET_TASKS权限于Android L废弃，REAL_GET_TASKS权限仅限系统应用有效！！！</span><br><span class="line">因此，无法在App日志中查看任务栈信息。</span><br><span class="line">任务栈查看方法：Android Studio 中 Terminal 输入 adb shell dumpsys activity activities</span><br></pre></td></tr></table></figure>

<p>由于我在SplashActivity中写了finish方法，可以分别看到:<br><strong>#0</strong>直接启动：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Running activities (most recent first):</span><br><span class="line">TaskRecord&#123;ea096c0 #1597 A=[packageName] U=0 StackId=1604 sz=1&#125;</span><br><span class="line">Run #0: ActivityRecord&#123;e30acd0 u0 [packageName]/[packageName].activity.MainActivity t1597&#125;</span><br><span class="line">mResumedActivity: ActivityRecord&#123;e30acd0 u0 [packageName]/[packageName].activity.MainActivity t1597&#125;</span><br><span class="line">mLastPausedActivity: ActivityRecord&#123;f68c709 u0 [packageName]/[packageName].activity.SplashActivity t-1f&#125;</span><br></pre></td></tr></table></figure>

<p><strong>#1</strong>点击Home键后，再次打开，在Splash页面时的任务栈：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Running activities (most recent first):</span><br><span class="line">TaskRecord&#123;ea096c0 #1597 A=[packageName] U=0 StackId=1604 sz=2&#125;</span><br><span class="line">Run #1: ActivityRecord&#123;433989 u0 [packageName]/[packageName].activity.SplashActivity t1597&#125;</span><br><span class="line">Run #0: ActivityRecord&#123;e30acd0 u0 [packageName]/[packageName].activity.MainActivity t1597&#125;</span><br></pre></td></tr></table></figure>

<p>两者对比，可以看到任务栈中Splash两次的<strong>id是不同的</strong>，而<strong>main是一致的</strong>。<strong>App并非重启，只是多启动了一次Splash。</strong><br>可见：我们只需要消除往后打开时的Splash页面即可。<br>如何做？根据上述分析，有如下判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">在SplashActivity中</span><br><span class="line"><span class="keyword">if</span>(SplashActivity在 任务栈最底部 )&#123;</span><br><span class="line">    <span class="comment">//App为正常启动</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//App为已经启动并且点击Home键后再次打开</span></span><br><span class="line">    关闭被错误打开的SplashActivity</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断是否为 任务栈最底部的 源码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return whether this activity is the root of a task.  The root is the</span></span><br><span class="line"><span class="comment"> * first activity in a task.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> True if this is the root activity, else false.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTaskRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ActivityManager.getService().getTaskForActivity(mToken, <span class="keyword">true</span>) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplashActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.isTaskRoot()) &#123;<span class="comment">//判断是否为根Activity</span></span><br><span class="line">            Intent mainIntent = getIntent();</span><br><span class="line">            String action = mainIntent.getAction();</span><br><span class="line">            <span class="comment">//判断是否为启动页 如果App不会因为其他原因调用该页面，可以不写if语句</span></span><br><span class="line">            <span class="keyword">if</span> (mainIntent.hasCategory(Intent.CATEGORY_LAUNCHER) </span><br><span class="line">                &amp;&amp; Intent.ACTION_MAIN.equals(action)) &#123;</span><br><span class="line">                finish();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个代码应该<strong>紧随</strong>着<code>super.onCreate(savedInstanceState);</code>之后。<br>onCreate确保当前Activity是正在创建状态，而在setContentView之前，确保Activity是未渲染的，此时关闭不会让用户察觉</p>
</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li><p><strong>方案二</strong>虽然确实能够解决Home键重启问题，但是也会导致App启动速度变慢（有一个白屏过程），而这个问题在App使用360/乐固等加固后，更为严重，这或许是需要进一步解决的。</p>
</li>
<li><p>我在项目中用了取巧的解决方案：迷惑用户——<strong>将白屏替换成启动页</strong>。为启动页设置一个Theme（仅限启动页）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Splash_Theme"</span> <span class="attr">parent</span>=<span class="string">"AppTheme_NoActionBar"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@drawable/splash<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>想丶把代码写出诗意</category>
      </categories>
      <tags>
        <tag>Dev</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 音量控制</title>
    <url>/dev/200509-audioManager.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Android监听音量、修改音量——AudioManager的使用。<a id="more"></a></p>
<h1 id="方法与参数"><a href="#方法与参数" class="headerlink" title="方法与参数"></a>方法与参数</h1><ol>
<li><p>设置声音模式：</p>
<p><code>setRingerMode(int ringerMode)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静音模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RINGER_MODE_SILENT = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 震动模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RINGER_MODE_VIBRATE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 声音模式/响铃模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RINGER_MODE_NORMAL = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调整声音大小</p>
<p><code>adjustVolume(int direction, int flags)</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//direction</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 减小音量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ADJUST_LOWER = -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 增大音量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ADJUST_RAISE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//flags</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 会弹出调节音量的界面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_SHOW_UI = <span class="number">1</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 声音调整为最小值时开启振动模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ALLOW_RINGER_MODES = <span class="number">1</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调整音量时播放声音</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_PLAY_SOUND = <span class="number">1</span> &lt;&lt; <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取最大音量和当前音量</p>
<p><code>getStreamVolume(int streamType)</code>和<code>getStreamMaxVolume(int streamType)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通话声音</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STREAM_VOICE_CALL = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 系统声音</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STREAM_SYSTEM = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多媒体音量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STREAM_MUSIC = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提示音</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STREAM_ALARM = <span class="number">4</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调整音量为具体数值</p>
<p><code>setStreamVolume(int streamType, int index, int flags)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//streamType 同3</span></span><br><span class="line"><span class="comment">//flags 同2</span></span><br><span class="line"><span class="comment">//index 为目标音量</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AudioManager辅助类</span></span><br><span class="line"><span class="comment"> * Created by yooking on 2020/5/9.</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2020 yooking. All rights reserved.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudioHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工厂 - 单例 - 懒汉式 - 线程安全</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AudioHelper instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AudioManager manager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> AudioHelper <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> AudioHelper();</span><br><span class="line">            <span class="comment">//这里用ApplicationContext</span></span><br><span class="line">            manager = (AudioManager) AppContext.getInstance().getSystemService(Context.AUDIO_SERVICE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取多媒体最大音量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMediaMaxVolume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> manager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取多媒体音量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMediaVolume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> manager.getStreamVolume(AudioManager.STREAM_MUSIC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取通话最大音量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCallMaxVolume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> manager.getStreamMaxVolume(AudioManager.STREAM_VOICE_CALL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取通话音量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCallVolume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> manager.getStreamVolume(AudioManager.STREAM_VOICE_CALL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取系统音量最大值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSystemMaxVolume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> manager.getStreamMaxVolume(AudioManager.STREAM_SYSTEM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取系统音量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSystemVolume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> manager.getStreamVolume(AudioManager.STREAM_SYSTEM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取提示音量最大值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAlarmMaxVolume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> manager.getStreamMaxVolume(AudioManager.STREAM_ALARM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取提示音量最大值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAlarmVolume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> manager.getStreamVolume(AudioManager.STREAM_ALARM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置多媒体音量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMediaVolume</span><span class="params">(<span class="keyword">int</span> volume)</span> </span>&#123;</span><br><span class="line">        manager.setStreamVolume(AudioManager.STREAM_MUSIC, <span class="comment">//音量类型</span></span><br><span class="line">                volume,</span><br><span class="line">                AudioManager.FLAG_PLAY_SOUND</span><br><span class="line">                        | AudioManager.FLAG_SHOW_UI);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置通话音量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallVolume</span><span class="params">(<span class="keyword">int</span> volume)</span> </span>&#123;</span><br><span class="line">        manager.setStreamVolume(AudioManager.STREAM_VOICE_CALL,</span><br><span class="line">                volume,</span><br><span class="line">                AudioManager.STREAM_VOICE_CALL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置铃声音量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAlarmVolume</span><span class="params">(<span class="keyword">int</span> volume)</span> </span>&#123;</span><br><span class="line">        manager.setStreamVolume(AudioManager.STREAM_ALARM,</span><br><span class="line">                volume,</span><br><span class="line">                AudioManager.FLAG_PLAY_SOUND</span><br><span class="line">                        | AudioManager.FLAG_SHOW_UI);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置系统音量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSystemVolume</span><span class="params">(<span class="keyword">int</span> volume)</span> </span>&#123;</span><br><span class="line">        manager.setStreamVolume(AudioManager.STREAM_SYSTEM,</span><br><span class="line">                volume,</span><br><span class="line">                AudioManager.FLAG_PLAY_SOUND</span><br><span class="line">                        | AudioManager.FLAG_SHOW_UI);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭/打开扬声器播放</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSpeakerStatus</span><span class="params">(<span class="keyword">boolean</span> on)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        获取当前音频模式，返回值：MODE_NORMAL（普通）、MODE_RINGTONE（铃声）、MODE_IN_CALL（呼叫）或者MODE_IN_COMMUNICATION（通话）</span></span><br><span class="line"><span class="comment">//        int mode = manager.getMode();</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (on) &#123; <span class="comment">//扬声器</span></span><br><span class="line">            manager.setSpeakerphoneOn(<span class="keyword">true</span>);</span><br><span class="line">            manager.setMode(AudioManager.MODE_NORMAL);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 设置成听筒模式</span></span><br><span class="line">            manager.setSpeakerphoneOn(<span class="keyword">false</span>);<span class="comment">// 关闭扬声器</span></span><br><span class="line">            manager.setMode(AudioManager.MODE_IN_COMMUNICATION);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>想丶把代码写出诗意</category>
      </categories>
      <tags>
        <tag>Dev</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin-webSocket的基本封装</title>
    <url>/dev/190809-webSocket.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li><p><strong>什么是webSocket</strong><br>WebSocket是一种在单个TCP连接上进行全双工通信的协议。WebSocket通信协议于2011年被IETF定为标准RFC 6455，并由RFC7936补充规范。WebSocket API也被W3C定为标准。<br>WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。<br>——摘自<a href="https://baike.baidu.com/item/WebSocket/1953845?fr=aladdin">百度百科</a></p>
</li>
<li><p><strong>应用场景</strong></p>
<p>App与服务器长连接，一般用于通讯。<a id="more"></a></p>
</li>
</ul>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="框架引入"><a href="#框架引入" class="headerlink" title="框架引入"></a>框架引入</h2><p>框架路径：<br><a href="https://github.com/TooTallNate/Java-WebSocket">Java-WebSocket</a><br><a href="https://square.github.io/okhttp/">OkHttp-GithubPage</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//implementation "org.java-websocket:Java-WebSocket:1.4.0"//</span></span><br><span class="line"><span class="comment">//改用 square项目</span></span><br><span class="line">implementation <span class="string">'com.squareup.okhttp3:okhttp:4.0.1'</span></span><br><span class="line">implementation <span class="string">'com.squareup.okhttp3:logging-interceptor:4.0.1'</span></span><br></pre></td></tr></table></figure>

<h2 id="创建Utils类"><a href="#创建Utils类" class="headerlink" title="创建Utils类"></a>创建Utils类</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> url webSocket 服务链接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> listener webSocket 消息回调 - 这里直接使用okhttp的回调/可根据需求另行封装</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSocketUtils</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> url: String, <span class="keyword">private</span> <span class="keyword">val</span> listener: WebSocketListener)</span><br></pre></td></tr></table></figure>

<h2 id="初始化webSocket"><a href="#初始化webSocket" class="headerlink" title="初始化webSocket"></a>初始化webSocket</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> TAG: String = <span class="string">"WebSocketLog"</span><span class="comment">//日志抬头</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> READ_TIMEOUT: <span class="built_in">Long</span> = <span class="number">30</span><span class="comment">//读取超时</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> WRITE_TIMEOUT: <span class="built_in">Long</span> = <span class="number">30</span><span class="comment">//写入超时</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> CONNECT_TIMEOUT: <span class="built_in">Long</span> = <span class="number">30</span><span class="comment">//连接超时</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> okHttpClient: OkHttpClient</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> webSocket: RealWebSocket</span><br><span class="line"><span class="keyword">init</span>&#123;</span><br><span class="line">    <span class="comment">//引入log日志</span></span><br><span class="line">    <span class="keyword">val</span> interceptor = HttpLoggingInterceptor(</span><br><span class="line">        <span class="keyword">object</span> : HttpLoggingInterceptor.Logger &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">log</span><span class="params">(message: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">                Log.d(TAG, message)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    interceptor.level = HttpLoggingInterceptor.Level.BODY<span class="comment">//日志等级</span></span><br><span class="line">    okHttpClient = OkHttpClient.Builder()</span><br><span class="line">    	.readTimeout(READ_TIMEOUT, TimeUnit.SECONDS)<span class="comment">//设置读取超时时间</span></span><br><span class="line">    	.writeTimeout(WRITE_TIMEOUT, TimeUnit.SECONDS)<span class="comment">//设置写的超时时间</span></span><br><span class="line">    	.connectTimeout(CONNECT_TIMEOUT, TimeUnit.SECONDS)<span class="comment">//设置连接超时时间</span></span><br><span class="line">    	.retryOnConnectionFailure(<span class="literal">true</span>)<span class="comment">//断线重连</span></span><br><span class="line">    	.addInterceptor(interceptor)<span class="comment">//添加拦截器</span></span><br><span class="line">    	.build()</span><br><span class="line">    <span class="keyword">val</span> request: Request = Request.Builder().url(url).build()</span><br><span class="line">    <span class="comment">//创建webSocket</span></span><br><span class="line">    webSocket = okHttpClient.newWebSocket(request, listener) <span class="keyword">as</span> RealWebSocket</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="基本方法封装"><a href="#基本方法封装" class="headerlink" title="基本方法封装"></a>基本方法封装</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">send</span><span class="params">(message: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">//这里message为与后台约定的内容 建议使用Json样式</span></span><br><span class="line">    <span class="keyword">val</span> isSend = webSocket.send(message)</span><br><span class="line">    <span class="comment">//发送失败可以做重新发送</span></span><br><span class="line">    Log.d(TAG, <span class="string">"send--&gt;isSend:<span class="variable">$isSend</span> message:<span class="variable">$message</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重连</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">reConnect</span><span class="params">(url: <span class="type">String</span>)</span></span> &#123;<span class="comment">//替换了url</span></span><br><span class="line">    webSocket.cancel()</span><br><span class="line">    <span class="keyword">val</span> request: Request = Request.Builder().url(url).build()</span><br><span class="line">    webSocket = okHttpClient.newWebSocket(request, listener) <span class="keyword">as</span> RealWebSocket</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">reConnect</span><span class="params">()</span></span> &#123;<span class="comment">//未替换url</span></span><br><span class="line">    reConnect(url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//断开</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">cancel</span><span class="params">()</span></span> &#123;</span><br><span class="line">    webSocket.cancel()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="心跳机制处理"><a href="#心跳机制处理" class="headerlink" title="心跳机制处理"></a>心跳机制处理</h2><p><strong>心跳的启动与关闭封装</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> WHAT_HEART: <span class="built_in">Int</span> = <span class="number">0</span><span class="comment">//handler-what</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> DEFAULT_HEART_TIME: <span class="built_in">Long</span> = <span class="number">60</span><span class="comment">//默认心跳时间</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> heartMessage 向后台服务发送的心跳消息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> current 间隔时间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startHeart</span><span class="params">(heartMessage: <span class="type">String</span>, current: <span class="type">Long</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.heartMessage = heartMessage</span><br><span class="line">    heartTime = current!!</span><br><span class="line">    handler.sendEmptyMessage(WHAT_HEART)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//停止心跳</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">endHeart</span><span class="params">()</span></span> &#123;</span><br><span class="line">    handler.removeMessages(WHAT_HEART)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>心跳Handler</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里使用静态内部类 防止内存泄漏</span></span><br><span class="line"><span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">WithoutLeakHandler</span></span>(wsu: WebSocketUtils) : Handler() &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">val</span> mWsu: WeakReference&lt;WebSocketUtils&gt; = WeakReference(wsu)</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">handleMessage</span><span class="params">(msg: <span class="type">Message</span>?)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.handleMessage(msg)</span><br><span class="line">            <span class="keyword">val</span> webSocketUtils = mWsu.<span class="keyword">get</span>()!!</span><br><span class="line">            <span class="comment">//调用发送方法向后台服务发送心跳信息</span></span><br><span class="line">            webSocketUtils.send(webSocketUtils.heartMessage)</span><br><span class="line">            <span class="comment">//webSocketUtils.heartTime之后再次发送心跳信息</span></span><br><span class="line">            msg!!.target.sendEmptyMessageDelayed(WHAT_HEART, webSocketUtils.heartTime)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> handler: Handler = WithoutLeakHandler(<span class="keyword">this</span>)</span><br></pre></td></tr></table></figure>

<h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">webSocketUtils = WebSocketUtils(url,<span class="keyword">object</span> : WebSocketListener() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onOpen</span><span class="params">(webSocket: <span class="type">WebSocket</span>, response: <span class="type">Response</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onOpen(webSocket, response)</span><br><span class="line">        Log.d(TAG, <span class="string">"onOpen"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onMessage</span><span class="params">(webSocket: <span class="type">WebSocket</span>, text: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onMessage(webSocket, text)</span><br><span class="line">        Log.d(TAG, <span class="string">"onMessage--&gt;text:<span class="variable">$text</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onMessage</span><span class="params">(webSocket: <span class="type">WebSocket</span>, bytes: <span class="type">ByteString</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onMessage(webSocket, bytes)</span><br><span class="line">        Log.d(TAG, <span class="string">"onMessage--&gt;bytes:<span class="variable">$bytes</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClosed</span><span class="params">(webSocket: <span class="type">WebSocket</span>, code: <span class="type">Int</span>, reason: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onClosed(webSocket, code, reason)</span><br><span class="line">        Log.d(TAG, <span class="string">"onClosed--&gt;code:<span class="variable">$code</span>\treason<span class="variable">$reason</span>"</span>)</span><br><span class="line">        webSocketUtils.endHeart()<span class="comment">//停止心跳</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClosing</span><span class="params">(webSocket: <span class="type">WebSocket</span>, code: <span class="type">Int</span>, reason: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onClosing(webSocket, code, reason)</span><br><span class="line">        Log.d(TAG, <span class="string">"onClosing--&gt;code:<span class="variable">$code</span>\treason<span class="variable">$reason</span>"</span>)</span><br><span class="line">        webSocketUtils.endHeart()<span class="comment">//停止心跳</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(webSocket: <span class="type">WebSocket</span>, t: <span class="type">Throwable</span>, response: <span class="type">Response</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onFailure(webSocket, t, response)</span><br><span class="line">        Log.d(TAG, <span class="string">"onFailure--&gt;throwable:<span class="variable">$t</span>"</span>)</span><br><span class="line">        <span class="comment">//webSocketUtils.reConnect()</span></span><br><span class="line">        webSocketUtils.endHeart()<span class="comment">//停止心跳</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">webSocketUtils.startHeart(<span class="string">"心跳消息"</span>, <span class="number">1000</span>)<span class="comment">//启动心跳</span></span><br></pre></td></tr></table></figure>

<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p><a href="https://github.com/yooking-git/DEMO-IM">Github</a></p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>建议使用Service进行webSocket连接</p>
]]></content>
      <categories>
        <category>想丶把代码写出诗意</category>
      </categories>
      <tags>
        <tag>Dev</tag>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Android沉浸式布局导致的键盘遮挡问题处理方案</title>
    <url>/dev/190808-virtual-Keyboard.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>公司项目——沉浸式布局<br>沉浸式方案：全屏+透明状态栏<br>问题：键盘遮挡输入框<a id="more"></a><br>解决思路：检测键盘是否弹起，根据键盘的弹起与回收，重新绘制界面<br>解决方案：AndroidBug5497Workaround</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndroidBug5497Workaround</span> </span>&#123;</span><br><span class="line">    <span class="comment">//该解决方案用于处理 全屏下键盘 问题 :</span></span><br><span class="line">    <span class="comment">//当Theme为 @android:style/Theme.Light.NoTitleBar.Fullscreen 时</span></span><br><span class="line">    <span class="comment">//android:windowSoftInputMode="adjustResize" 无效</span></span><br><span class="line">    <span class="comment">// For more information, see https://code.google.com/p/android/issues/detail?id=5497</span></span><br><span class="line">    <span class="comment">// To use this class, simply invoke assistActivity() on an Activity that already has its content view set.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//紧随setContentView之后调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">assistActivity</span> <span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> AndroidBug5497Workaround(activity);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> View mChildOfContent;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> usableHeightPrevious;</span><br><span class="line">    <span class="keyword">private</span> FrameLayout.LayoutParams frameLayoutParams;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">AndroidBug5497Workaround</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取Activity的最外层布局</span></span><br><span class="line">        FrameLayout content = (FrameLayout) activity.findViewById(android.R.id.content);</span><br><span class="line">        mChildOfContent = content.getChildAt(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//监听键盘弹起与收回</span></span><br><span class="line">        mChildOfContent.getViewTreeObserver().addOnGlobalLayoutListener(</span><br><span class="line">            <span class="keyword">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    possiblyResizeChildOfContent();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//重置页面属性</span></span><br><span class="line">        frameLayoutParams = (FrameLayout.LayoutParams) mChildOfContent.getLayoutParams();</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 获取界面可用高度，如果软键盘弹起后，Activity的xml布局可用高度需要减去键盘高度 </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">possiblyResizeChildOfContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> usableHeightNow = computeUsableHeight();</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//判断 当前可用高度和 历史可用高度不同 （即键盘状态发生变化） 时，调整界面高度</span></span><br><span class="line">        <span class="keyword">if</span> (usableHeightNow != usableHeightPrevious) &#123;</span><br><span class="line">            <span class="keyword">int</span> usableHeightSansKeyboard = mChildOfContent.getRootView().getHeight();</span><br><span class="line">            <span class="keyword">int</span> heightDifference = usableHeightSansKeyboard - usableHeightNow;</span><br><span class="line">            <span class="comment">//将 可用高度的1/4视为键盘高度</span></span><br><span class="line">            <span class="keyword">if</span> (heightDifference &gt; (usableHeightSansKeyboard/<span class="number">4</span>)) &#123;</span><br><span class="line">                <span class="comment">// keyboard probably just became visible</span></span><br><span class="line">                frameLayoutParams.height = usableHeightSansKeyboard - heightDifference;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// keyboard probably just became hidden</span></span><br><span class="line">                frameLayoutParams.height = usableHeightSansKeyboard;</span><br><span class="line">            &#125;</span><br><span class="line">            mChildOfContent.requestLayout();</span><br><span class="line">            usableHeightPrevious = usableHeightNow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//获取页面可用高度</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">computeUsableHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Rect r = <span class="keyword">new</span> Rect();</span><br><span class="line">        mChildOfContent.getWindowVisibleDisplayFrame(r);</span><br><span class="line">        <span class="comment">//全屏应用 不需要减去 top , r.top 为状态栏高度，r.bottom 为屏幕可用最底部高度</span></span><br><span class="line">        <span class="comment">//return r.bottom;</span></span><br><span class="line">        <span class="keyword">return</span> (r.bottom - r.top);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://code.google.com/p/android/issues/detail?id=5497">google-issues-5497</a>（code.google.com）<br><a href="https://github.com/madebycm/AndroidBug5497Workaround">Android-5497问题解决方案</a>（github.com）<br><a href="https://www.jianshu.com/p/a95a1b84da11">据说能解决5497方案的兼容问题</a>（jianshu.com）</p>
]]></content>
      <categories>
        <category>想丶把代码写出诗意</category>
      </categories>
      <tags>
        <tag>Dev</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android插件化-Small框架</title>
    <url>/dev/190802-small.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>世界那么大，组件那么小。Small，做最轻巧的跨平台插件化框架。 ——Galenlin</strong></p>
<p>本文暂停更新直到Small支持AS3.2为止<a id="more"></a></p>
<p><strong>Small官方路径：</strong></p>
<ul>
<li><p>Github路径：<a href="https://github.com/wequick/Small">github.com/wequick/Small</a></p>
</li>
<li><p>文档路径：<a href="http://code.wequick.net/Small/cn/home">code.wequick.net/Small/cn/home</a></p>
</li>
</ul>
<h2 id="引入框架"><a href="#引入框架" class="headerlink" title="引入框架"></a>引入框架</h2><ol>
<li><p>根据官方文档配置框架</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ext.small_version = <span class="string">'1.5.0-beta2'</span></span><br><span class="line">    ...</span><br><span class="line">    dependencies&#123;</span><br><span class="line">        ...</span><br><span class="line">        classpath <span class="string">"net.wequick.tools.build:gradle-small:$small_version"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">apply plugin: <span class="string">'net.wequick.small'</span></span><br><span class="line">small &#123;</span><br><span class="line">    aarVersion = <span class="string">"$small_version"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>报错1：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">ERROR: Unable to resolve dependency for ':app@debug/compileClasspath': Could not resolve org.jetbrains.kotlin:kotlin-stdlib-jre7:1.3.31.</span><br></pre></td></tr></table></figure>

<p>emmm…<strong>垃圾软件毁我青春</strong>，Tyr Again<br>好的，报错换了，<strong>报错2：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">ERROR: Failed to resolve: org.jetbrains.kotlin:kotlin-stdlib-jre7:1.3.31</span><br></pre></td></tr></table></figure>

<p>emmm…<strong>垃圾软件毁我青春！！！</strong>，要不这框架我不用了…<br><strong>如果遇到问题无法解决，那么就解决出题人</strong>——于是我把基于Kotlin编程改为基于Java编程…</p>
</li>
<li><p>Small框架引入后，在Terminal中键入：<code>gradlew small</code>校验：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">### Compile-time</span><br><span class="line"></span><br><span class="line">gradle-small plugin : 1.5.0-beta2 (maven)</span><br><span class="line">          small aar : 1.5.0-beta2 (maven)</span><br><span class="line">        gradle core : 5.1.1</span><br><span class="line">     android plugin : 3.4.2</span><br><span class="line">                 OS : Windows 7 6.1 (amd64)</span><br><span class="line"></span><br><span class="line">### Bundles</span><br><span class="line"></span><br><span class="line">| type | name | PP | sdk |  aapt  | support | file | size |</span><br><span class="line">|------|------|----|-----|--------|---------|------|------|</span><br><span class="line">| host | app  |    | 28  | 29.0.2 |         |      |      |</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="配置宿主"><a href="#配置宿主" class="headerlink" title="配置宿主"></a>配置宿主</h2><ol>
<li><p>新建一个Application</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppAplication</span> <span class="keyword">extends</span> <span class="title">Application</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化Small</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果项目中使用了ContentProvider，</span></span><br><span class="line"><span class="comment"> * 那么该方法必须在构造方法中调用</span></span><br><span class="line"><span class="comment"> * ——在onCreate之前</span></span><br><span class="line"><span class="comment"> * 如果未用到ContentProvider，</span></span><br><span class="line"><span class="comment"> * 可以在onCreate中调用</span></span><br><span class="line"><span class="comment"> * ——因此放在构造方法中最省事</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preSetUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Small.preSetUp(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AppAplication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	preSetUp();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="创建插件模块"><a href="#创建插件模块" class="headerlink" title="创建插件模块"></a>创建插件模块</h2><ol>
<li><p>根据文档表明，我需要创建一个：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Application/Library name ：App.main</span><br><span class="line">             Module name ：app.main</span><br><span class="line">            Package name ：com.yooking.app.main</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li>我想我遇到一个大麻烦了：<code>Ilegal character &#39;.&#39; in Module name &#39;App.main&#39;</code><br>emmm…点开<a href="https://github.com/wequick/Small/issues">issues</a><br>emmm…很遗憾，朋友们，这篇文章结束了，忽然感觉自己少了好多事儿~~</li>
</ol>
]]></content>
      <categories>
        <category>想丶把代码写出诗意</category>
      </categories>
      <tags>
        <tag>Dev</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android热补丁技术初探</title>
    <url>/dev/190924-hotfix.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="什么是热补丁"><a href="#什么是热补丁" class="headerlink" title="什么是热补丁"></a>什么是热补丁</h2><p>&emsp;&emsp;简单来说，就是在不重新安装Apk的情况下，修复App存在的bug或进行功能性迭代。<a id="more"></a></p>
]]></content>
      <categories>
        <category>想丶把代码写出诗意</category>
      </categories>
      <tags>
        <tag>Dev</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android辅助功能开发-一键优化</title>
    <url>/dev/200424-accessibilityService.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>公司项目需求：为App提供一键优化功能（一键获取相关所有权限），确保App在优化过后能够常驻手机，为用户提供服务。——商户类App，用户非主动关闭时常驻手机合情合理<a id="more"></a></p>
<h1 id="阅读源码"><a href="#阅读源码" class="headerlink" title="阅读源码"></a>阅读源码</h1><ol>
<li><p><strong>getWindows()和getRootInActiveWindow()</strong></p>
<p><code>List&lt;AccessibilityNodeInfo&gt; getWindows()</code> 即：获取当前页面所有的节点——包括顶部状态栏、底部系统按钮等各自的root节点。</p>
<p><code>AccessibilityNodeInfo getRootInActiveWindow()</code>即：获取当前活动页面（Activity）中的root节点。</p>
<p><code>getRootInActiveWindow()</code>方法在页面未加载完成时可能为null，而<code>getWindows()</code>一直有值。</p>
</li>
<li><p><strong>AccessibilityNodeInfo</strong></p>
<p><code>AccessibllityNodeInfo</code>类是含有链表结构的类（应该是这样称呼吧）。</p>
<p>譬如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccessibilityNodeInfo</span> <span class="keyword">implements</span> <span class="title">Parcelable</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccessibilityNodeInfo <span class="title">getParent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Stub!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccessibilityNodeInfo <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Stub!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AccessibllityNodeInfo</code>页包含了对View的操作（仅包含有用到的部分）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccessibilityNodeInfo</span> <span class="keyword">implements</span> <span class="title">Parcelable</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//点击事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ACTION_CLICK = <span class="number">16</span>;</span><br><span class="line">    <span class="comment">//朝后滚动 performAction返回false即滑动到顶部</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ACTION_SCROLL_BACKWARD = <span class="number">8192</span>;</span><br><span class="line">    <span class="comment">//朝前滚动 performAction返回false即滑动到底部</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ACTION_SCROLL_FORWARD = <span class="number">4096</span>;</span><br><span class="line">    ...</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">performAction</span><span class="params">(<span class="keyword">int</span> action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Stub!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">performAction</span><span class="params">(<span class="keyword">int</span> action, Bundle arguments)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Stub!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>全局事件</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessibilityService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//返回键</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GLOBAL_ACTION_BACK = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//Home键</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GLOBAL_ACTION_HOME = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//菜单键</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GLOBAL_ACTION_RECENTS = <span class="number">3</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">performGlobalAction</span><span class="params">(<span class="keyword">int</span> action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Stub!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="封装工具"><a href="#封装工具" class="headerlink" title="封装工具"></a>封装工具</h1><p>了解完AccessibilityService后，可以对Accessibility进行简单的封装，方便使用。</p>
<ol>
<li><p><strong>获取root节点</strong></p>
<p>由上可知，在寻找目标的root节点这方面，<code>getRootInActiveWindow()</code>会根据有优势，所以</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 获取root节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> AccessibilityNodeInfo <span class="title">findRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> getRootInActiveWindow();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取所有当前Activity可见节点</strong></p>
<p>遍历多叉树</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历多叉树 全遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;AccessibilityNodeInfo&gt; <span class="title">iteratorTree</span><span class="params">(AccessibilityNodeInfo parent)</span> </span>&#123;</span><br><span class="line">    List&lt;AccessibilityNodeInfo&gt; childList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (parent == <span class="keyword">null</span>) <span class="keyword">return</span> childList;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parent.getChildCount(); i++) &#123;</span><br><span class="line">        AccessibilityNodeInfo child = parent.getChild(i);</span><br><span class="line">        childList.add(child);</span><br><span class="line">        <span class="keyword">if</span> (child.getChildCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//利用递归方法</span></span><br><span class="line">            childList.addAll(iteratorTree(child));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> childList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取全部可见节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历当前页面所有节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;AccessibilityNodeInfo&gt; <span class="title">findAllView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AccessibilityNodeInfo parent = findRoot();</span><br><span class="line">    List&lt;AccessibilityNodeInfo&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(parent);</span><br><span class="line">    list.addAll(iteratorTree(parent));</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查找第一个匹配节点</strong></p>
<p>马后炮：在Activity中，可能存在<code>ListView</code>、<code>RecyclerView</code>等<strong>滑动控件</strong>使得目标节点出现<strong>超出屏幕</strong>情况，所以我们应当先在<strong>当前可见区域</strong>内查找是否有目标节点，如果没有，则<strong>向下滚动</strong>，再次查找目标节点——直至滑动到屏幕底部。为防止当前界面<strong>并非从最顶部开始</strong>向下滑动，故应该<strong>再向上滑动</strong>到顶部一次。</p>
<p>查找滑动组件代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; SCROLL_CLASS_NAME_ARRAY = Arrays.asList(</span><br><span class="line">            <span class="string">"android.widget.ListView"</span>,</span><br><span class="line">            <span class="string">"android.support.v7.widget.RecyclerView"</span>,</span><br><span class="line">            <span class="string">"androidx.recyclerview.widget.RecyclerView"</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找可滑动的view</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;AccessibilityNodeInfo&gt; <span class="title">findCanScrollView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;AccessibilityNodeInfo&gt; viewList = findAllView();</span><br><span class="line">    List&lt;AccessibilityNodeInfo&gt; scrollViewList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (AccessibilityNodeInfo info : viewList) &#123;</span><br><span class="line">        <span class="keyword">if</span> (info != <span class="keyword">null</span>)</span><br><span class="line">            <span class="comment">//info.isScrollable判断是否为可滚动控件</span></span><br><span class="line">            <span class="keyword">if</span> (info.isScrollable()) &#123;</span><br><span class="line">                <span class="comment">//其中滚动控件还包含了spinner、viewpage等,而这些控件目前业务中并没有需要（且会影响业务内容），因此做了个限定</span></span><br><span class="line">                <span class="keyword">for</span> (String scrollClassName : SCROLL_CLASS_NAME_ARRAY) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (scrollClassName.equals(info.getClassName().toString())) &#123;</span><br><span class="line">                        scrollViewList.add(info);</span><br><span class="line">                        setLog(<span class="string">"------------------------------------------------------------"</span>);</span><br><span class="line">                        setLog(<span class="string">"查询到可滑动组件"</span> + info.getViewIdResourceName());</span><br><span class="line">                        setLog(<span class="string">"查询到可滑动组件"</span> + info.getClassName());</span><br><span class="line">                        setLog(<span class="string">"------------------------------------------------------------"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> scrollViewList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历多叉树，根据条件查寻当前可见部分的节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遍历多叉树 查询方法</span></span><br><span class="line"><span class="comment"> * 找到控件会抛出异常，异常中包含目标数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findIteratorTree</span><span class="params">(AccessibilityNodeInfo parent, String text)</span> <span class="keyword">throws</span> StopIteratorException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (parent != <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parent.getChildCount(); i++) &#123;</span><br><span class="line">            AccessibilityNodeInfo child = parent.getChild(i);</span><br><span class="line">            <span class="keyword">if</span> (child != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">if</span> (multiCriteriaMatching(child, text)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> StopIteratorException(child);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child.getChildCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    findIteratorTree(child, text);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义报错 用于中断递归</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StopIteratorException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AccessibilityNodeInfo info;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StopIteratorException</span><span class="params">(AccessibilityNodeInfo info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> AccessibilityNodeInfo <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多条件匹配 multiCriteriaMatching</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> info 目前包含getViewIdResourceName、getClassName、getText</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> text 匹配词</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回匹配结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">multiCriteriaMatching</span><span class="params">(AccessibilityNodeInfo info, String text)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> text.equals(info.getViewIdResourceName())</span><br><span class="line">            || text.equals(info.getClassName() == <span class="keyword">null</span> ? <span class="keyword">null</span> : info.getClassName().toString())</span><br><span class="line">            || text.equals(info.getText() == <span class="keyword">null</span> ? <span class="keyword">null</span> : info.getText().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查找第一个匹配节点代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> text 要查找目标组件的标识 （className/resourceId/text）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回查找到的目标组件 null则表示查找失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> AccessibilityNodeInfo <span class="title">findFirst</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">    AccessibilityNodeInfo info = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        findIteratorTree(findRoot(), text);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> searchNum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> scroll = <span class="keyword">true</span>, isForward = <span class="keyword">true</span>;</span><br><span class="line">        List&lt;AccessibilityNodeInfo&gt; scrollViewList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (scroll) &#123;<span class="comment">//利用关键字scroll和Exception跳出循环</span></span><br><span class="line">            <span class="comment">//找不到控件，向下滑动继续找</span></span><br><span class="line">            <span class="keyword">if</span> (scrollViewList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (searchNum &lt; MAX_SEARCH_NUM) &#123;</span><br><span class="line">                    ++searchNum;</span><br><span class="line">                    scrollViewList.addAll(findCanScrollView());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//找不到可滑动组件</span></span><br><span class="line">                    setLog(<span class="string">"找不到可滑动组件，结束循环体，查找次数:"</span> + MAX_SEARCH_NUM);</span><br><span class="line">                    scroll = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (scrollViewList.size() != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//如果查找到滑动组件，则滑动滑动组件</span></span><br><span class="line">                <span class="comment">//下、上各滑动一次，确保找到控件</span></span><br><span class="line">                <span class="keyword">for</span> (AccessibilityNodeInfo scrollViewInfo : scrollViewList) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isForward) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!scrollViewInfo.performAction(AccessibilityNodeInfo.ACTION_SCROLL_FORWARD)) &#123;</span><br><span class="line">                            isForward = <span class="keyword">false</span>;<span class="comment">//滑动到底部，修改滑动状态，再滑一次</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!scrollViewInfo.performAction(AccessibilityNodeInfo.ACTION_SCROLL_BACKWARD)) &#123;</span><br><span class="line">                            scroll = <span class="keyword">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//滑动后 睡眠 之后查找组件</span></span><br><span class="line">            SystemClock.sleep(TIME_SLEEP);</span><br><span class="line">            findIteratorTree(findRoot(), text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (StopIteratorException e) &#123;</span><br><span class="line">        info = e.getInfo();</span><br><span class="line">        <span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</span><br><span class="line">            setLog(<span class="string">"------------------------------------------------------------"</span>);</span><br><span class="line">            setLog(<span class="string">"查询到目标组件id："</span> + info.getViewIdResourceName());</span><br><span class="line">            setLog(<span class="string">"查询到目标组件text："</span> + info.getText());</span><br><span class="line">            setLog(<span class="string">"查询到目标组件clsName："</span> + info.getClassName());</span><br><span class="line">            setLog(<span class="string">"------------------------------------------------------------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>补充说明：（可不看）</strong>在查看AccessibilityNodeInfo类中有如下方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccessibilityNodeInfo</span> <span class="keyword">implements</span> <span class="title">Parcelable</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AccessibilityNodeInfo&gt; <span class="title">findAccessibilityNodeInfosByText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Stub!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AccessibilityNodeInfo&gt; <span class="title">findAccessibilityNodeInfosByViewId</span><span class="params">(String viewId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Stub!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由此联想到<code>findIteratorTree(AccessibilityNodeInfo parent, String text)</code>或许可以改成：<strong>（以下代码未尝试，只是临时想到的改进方案）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> AccessibilityNodeInfo <span class="title">findIteratorTree</span><span class="params">(AccessibilityNodeInfo parent, String text)</span></span>&#123;</span><br><span class="line">    List&lt;AccessibilityNodeInfo&gt; infoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    infoList.addAll(parent.findAccessibilityNodeInfosByText(text));</span><br><span class="line">    <span class="keyword">if</span>(info.size() == <span class="number">0</span>)&#123;</span><br><span class="line">        infoList.addAll(parent.findAccessibilityNodeInfosByViewId(text));</span><br><span class="line">    &#125;</span><br><span class="line">    AccessibilityNodeInfo info = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(infoList.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    	info = infoList.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>点击事件</strong></p>
<p>找到目标节点后，自然是要对目标节点进行操作——这里仅封装点击事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点击事件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> info 要点击的目标View</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 点击结果（成功/失败）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">clickView</span><span class="params">(AccessibilityNodeInfo info)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (info != <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">if</span> (info.isClickable()) &#123;</span><br><span class="line">            info.performAction(AccessibilityNodeInfo.ACTION_CLICK);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            AccessibilityNodeInfo parent = info.getParent();</span><br><span class="line">            <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> b = clickView(parent);</span><br><span class="line">                parent.recycle();</span><br><span class="line">                <span class="keyword">return</span> b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将查询节点与点击节点组合起来就是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点击事件（点击本身）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> text 要点击的目标节点标识</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 点击结果（true/false）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">clickFirstView</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">    AccessibilityNodeInfo info = findFirst(text);</span><br><span class="line">    <span class="keyword">if</span> (info == <span class="keyword">null</span>) &#123;</span><br><span class="line">        setLog(text + <span class="string">"找不到匹配的控件"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clickView(info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那如果是CheckBox之类的点击事件（如下图）应该怎么处理？<br><img src="https://i.loli.net/2020/04/30/mkMsl5tZ3iz2X4w.jpg" alt="1.jpg"></p>
<p>首先转化为查询该CheckBox的<strong>同级节点</strong>，再通过该同级节点反查<strong>父节点</strong>，之后再查询<strong>父节点中的子节点</strong>中包含<code>isCheckable</code>的节点：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> AccessibilityNodeInfo <span class="title">findBrotherCheckBox</span><span class="params">(AccessibilityNodeInfo child)</span> </span>&#123;</span><br><span class="line">    AccessibilityNodeInfo checkBoxInfo = <span class="keyword">null</span>;</span><br><span class="line">    AccessibilityNodeInfo parent = child.getParent();</span><br><span class="line">    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        List&lt;AccessibilityNodeInfo&gt; infoList = iteratorTree(parent);</span><br><span class="line">        setLog(<span class="string">"------------------------------------------------------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (AccessibilityNodeInfo info : infoList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (info.isCheckable()) &#123;</span><br><span class="line">                checkBoxInfo = info;</span><br><span class="line">                setLog(<span class="string">"------------------------------------------------------------"</span>);</span><br><span class="line">                setLog(<span class="string">"查询到目标组件id："</span> + info.getViewIdResourceName());</span><br><span class="line">                setLog(<span class="string">"查询到目标组件text："</span> + info.getText());</span><br><span class="line">                setLog(<span class="string">"查询到目标组件clsName："</span> + info.getClassName());</span><br><span class="line">                setLog(<span class="string">"------------------------------------------------------------"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        setLog(<span class="string">"------------------------------------------------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> checkBoxInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CheckBox节点中有<code>isChecked</code>字段用于判断是( true )否( false )选中，因此有：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * checkBox的点击事件（带选中状态）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> brotherText 要点击目标的兄弟节点标识</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setChecked  将checkBox的状态修改为true/false</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回点击事件触发结果（true/false）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">clickCheckBox</span><span class="params">(String brotherText, <span class="keyword">boolean</span> setChecked)</span> </span>&#123;</span><br><span class="line">    AccessibilityNodeInfo brotherInfo = findFirst(brotherText);</span><br><span class="line">    <span class="keyword">if</span> (brotherInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">        setLog(brotherText + <span class="string">"找不到匹配的控件"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    AccessibilityNodeInfo checkBoxInfo = findBrotherCheckBox(brotherInfo);</span><br><span class="line">    <span class="keyword">if</span> (checkBoxInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">        setLog(brotherText + <span class="string">"找不到匹配的checkBox控件"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (checkBoxInfo.isChecked() != setChecked) &#123;</span><br><span class="line">        <span class="keyword">return</span> clickView(checkBoxInfo);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        setLog(<span class="string">"checkBox控件为目标状态，不点击"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>补充</strong></p>
<p>静态变量、日志与返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态变量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIME_SLEEP = <span class="number">300</span>;<span class="comment">//单位毫秒</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SEARCH_NUM = <span class="number">20</span>;<span class="comment">//查找循环体次数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//日志</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isDebugger</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setLog</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isDebugger()) &#123;</span><br><span class="line">        String tag = <span class="string">"AManagerLog"</span>;</span><br><span class="line">        Log.i(tag, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//系统返回键</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goBack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    performGlobalAction(GLOBAL_ACTION_BACK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上就是整个工具的封装了</p>
</li>
</ol>
<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><ol>
<li><p><strong>辅助功能触发点的设置</strong></p>
<p>辅助功能顾名思义，就是辅助用户使用当前App，甚至可以延伸为使用当前手机。比如：</p>
<ul>
<li>监测App接收到的通知消息，根据消息对手机进行辅助操作</li>
<li>监测文件下载状态，根据下载状态进行自动安装、打开等操作</li>
<li>当用户点击了某个位置时，根据点击的位置做出反馈</li>
<li>为用户自动开启相关权限等</li>
<li>…</li>
</ul>
<p>这时候：监测到App接收通知消息和监测到文件下载状态即为触发点；用户点击事件即为出发点；而开启权限，则可以是在辅助功能权限开启的时候。</p>
<p><strong>触发点为辅助功能权限开启</strong>：辅助功能权限开启的时候会调用初<strong>始化Service</strong>方法：<code>onServiceConnected()</code>，这里可以作为一个监测点，利用<code>sendBroadcast(Intent intent)</code>将<strong>服务启动</strong>的消息广播出去。而<strong>广播接收器</strong>就是真实的<strong>触发点</strong>。</p>
<p><strong>触发点为某种状态</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(该状态可回调)&#123;</span><br><span class="line">    <span class="keyword">if</span>(辅助功能权限开启)&#123;</span><br><span class="line">        直接执行辅助功能</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        弹出无障碍设置页面，引导用户开启辅助功能权限-触发点转为辅助功能权限开启时</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    监测状态改变引发的界面变化</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>触发点为用户点击事件</strong>：如果点击的是自己的App，在点击事件触发辅助功能即可。如果点击的不为自己的App，可以在<code>onAccessibilityEvent(AccessibilityEvent event)</code>触发。</p>
</li>
<li><p><strong>辅助功能执行</strong></p>
<p>辅助功能是一个富有想象力的功能，TA的执行能力取决于脑洞。比如模拟用户点击，让用户的操作更快捷（比如自动抢红包、一键连招等）或者取代繁琐操作（自动下载并安装等）甚至也可以是智能分词翻译（锤子BigBang）等等…</p>
<p>这里以“取代繁琐操作”为例——静的用户同意后，替用户勾选一些无法直接申请的权限：</p>
<p>任务：<code>AssignmentEntity</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssignmentEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Queue&lt;StepEntity&gt; queue = <span class="keyword">new</span> LinkedList();	<span class="comment">//步骤队列</span></span><br><span class="line">    <span class="keyword">private</span> String name;								<span class="comment">//任务名称</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AssignmentEntity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AssignmentEntity <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue&lt;StepEntity&gt; <span class="title">getQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加步骤</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AssignmentEntity <span class="title">addStep</span><span class="params">(StepEntity entity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue.add(entity);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体步骤：<code>StepEntity</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StepEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_INTENT = <span class="number">0</span>;    <span class="comment">//页面跳转</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_CLICK = <span class="number">1</span>;     <span class="comment">//点击事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_CHECKED = <span class="number">2</span>;   <span class="comment">//选中事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_BACK = <span class="number">3</span>;      <span class="comment">//返回事件</span></span><br><span class="line">    <span class="keyword">private</span> String name;      <span class="comment">//目标控件名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type;         <span class="comment">//事件类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checked;  <span class="comment">//选中事件-true:选中-false:反选</span></span><br><span class="line">    <span class="keyword">private</span> Intent intent;    <span class="comment">//跳转事件-Intent</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StepEntity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Intent <span class="title">getIntent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.intent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntent</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.intent = intent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isChecked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.checked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChecked</span><span class="params">(<span class="keyword">boolean</span> checked)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.checked = checked;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>步骤辅助类<code>StepHelper</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StepHelper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StepHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转事件</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StepEntity <span class="title">intentStep</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getStep(<span class="string">"页面跳转"</span>, <span class="number">0</span>, intent, (Boolean)<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击事件</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StepEntity <span class="title">clickStep</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getStep(text, <span class="number">1</span>, (Intent)<span class="keyword">null</span>, (Boolean)<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选中事件</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StepEntity <span class="title">checkStep</span><span class="params">(String text, <span class="keyword">boolean</span> setChecked)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getStep(text, <span class="number">2</span>, (Intent)<span class="keyword">null</span>, setChecked);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回事件</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StepEntity <span class="title">backStep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getStep(<span class="string">"返回上一页"</span>, <span class="number">3</span>, (Intent)<span class="keyword">null</span>, (Boolean)<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> StepEntity <span class="title">getStep</span><span class="params">(String name, <span class="keyword">int</span> type, @Nullable Intent intent, @Nullable Boolean setChecked)</span> </span>&#123;</span><br><span class="line">        StepEntity step = <span class="keyword">new</span> StepEntity();</span><br><span class="line">        step.setName(name);</span><br><span class="line">        step.setType(type);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == type) &#123;</span><br><span class="line">            <span class="keyword">if</span> (intent == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"代码错误，Type为TYPE_INTENT时Intent参数不能为空"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            step.setIntent(intent);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> == type) &#123;</span><br><span class="line">            <span class="keyword">if</span> (setChecked == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"代码错误，Type为TYPE_CHECKED时setChecked参数不能为空"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> b = setChecked;</span><br><span class="line">            step.setChecked(b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> step;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加任务示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssignmentFactory</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Queue&lt;AssignmentEntity&gt; <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Queue&lt;AssignmentEntity&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (RomUtils.isHuawei()) &#123;</span><br><span class="line">            queue.addAll(HuaweiFactory.create());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (RomUtils.isMiui()) &#123;</span><br><span class="line">            queue.addAll(XiaomiFactory.create());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (RomUtils.isOppo()) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (RomUtils.isMeizu()) &#123;</span><br><span class="line">            queue.addAll(MeizuFactory.create());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HuaweiFactory</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> version = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String systemProperty = RomUtils.getSystemProperty(<span class="string">"ro.build.version.emui"</span>);</span><br><span class="line">                <span class="keyword">if</span> (systemProperty != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    String trim = systemProperty.replace(<span class="string">"EmotionUI"</span>, <span class="string">""</span>).replace(<span class="string">"_"</span>, <span class="string">""</span>).trim();</span><br><span class="line">                    <span class="keyword">if</span> (trim.contains(<span class="string">"."</span>)) &#123;</span><br><span class="line">                        trim = trim.substring(<span class="number">0</span>, trim.indexOf(<span class="string">"."</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                    version = Integer.valueOf(trim);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> version;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> Queue&lt;AssignmentEntity&gt; <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            L.i(<span class="string">"手机版本号："</span> + getVersion()); <span class="comment">//目前适配10</span></span><br><span class="line">            Queue&lt;AssignmentEntity&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            queue.add(ignoreBatteryOptimization());</span><br><span class="line">            queue.addAll(newMessageNotification());</span><br><span class="line">            queue.add(selfStarting());</span><br><span class="line">            <span class="keyword">return</span> queue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//忽略电池优化</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> AssignmentEntity <span class="title">ignoreBatteryOptimization</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            AssignmentEntity assignment = <span class="keyword">new</span> AssignmentEntity();</span><br><span class="line">            assignment.setName(<span class="string">"忽略电池优化"</span>);</span><br><span class="line"></span><br><span class="line">            assignment.addStep(StepHelper.intentStep(IntentUtils.hightPowerManger()))</span><br><span class="line">                    .addStep(StepHelper.clickStep(<span class="string">"不允许"</span>))</span><br><span class="line">                    .addStep(StepHelper.clickStep(<span class="string">"所有应用"</span>))</span><br><span class="line">                    .addStep(StepHelper.clickStep(BaseApplication.getInstance().getAppName()))</span><br><span class="line">                    .addStep(StepHelper.clickStep(<span class="string">"不允许"</span>))</span><br><span class="line">                    .addStep(StepHelper.clickStep(<span class="string">"确定"</span>))</span><br><span class="line">                    .addStep(StepHelper.backStep());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> assignment;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//新消息通知</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Queue&lt;AssignmentEntity&gt; <span class="title">newMessageNotification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            AssignmentEntity ae1 = <span class="keyword">new</span> AssignmentEntity();</span><br><span class="line">            ae1.setName(<span class="string">"新消息通知"</span>);</span><br><span class="line">            AssignmentEntity ae2 = <span class="keyword">new</span> AssignmentEntity();</span><br><span class="line">            ae2.setName(<span class="string">"通知锁屏显示"</span>);</span><br><span class="line"></span><br><span class="line">            ae1.addStep(StepHelper.intentStep(IntentUtils.huaweiNotification()))</span><br><span class="line">                    .addStep(StepHelper.clickStep(BaseApplication.getInstance().getAppName()))</span><br><span class="line">                    .addStep(StepHelper.checkStep(<span class="string">"允许通知"</span>, <span class="keyword">true</span>))</span><br><span class="line">                    .addStep(StepHelper.backStep());</span><br><span class="line">            ae2.addStep(StepHelper.clickStep(<span class="string">"锁屏通知"</span>))</span><br><span class="line">                    .addStep(StepHelper.clickStep(<span class="string">"显示所有通知"</span>))</span><br><span class="line">                    .addStep(StepHelper.clickStep(<span class="string">"更多通知设置"</span>))</span><br><span class="line">                    .addStep(StepHelper.checkStep(<span class="string">"通知亮屏提示"</span>, <span class="keyword">true</span>))</span><br><span class="line">                    .addStep(StepHelper.backStep())</span><br><span class="line">                    .addStep(StepHelper.backStep());</span><br><span class="line"></span><br><span class="line">            Queue&lt;AssignmentEntity&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            queue.add(ae1);</span><br><span class="line">            queue.add(ae2);</span><br><span class="line">            <span class="keyword">return</span> queue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自启动</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> AssignmentEntity <span class="title">selfStarting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            AssignmentEntity assignment = <span class="keyword">new</span> AssignmentEntity();</span><br><span class="line">            assignment.setName(<span class="string">"自启动"</span>);</span><br><span class="line"></span><br><span class="line">            assignment.addStep(StepHelper.intentStep(IntentUtils.huaweiStartupNormalApp()))</span><br><span class="line">                    .addStep(StepHelper.checkStep(BaseApplication.getInstance().getAppName(), <span class="keyword">true</span>))</span><br><span class="line">                    .addStep(StepHelper.checkStep(BaseApplication.getInstance().getAppName(), <span class="keyword">false</span>))</span><br><span class="line">                    .addStep(StepHelper.checkStep(<span class="string">"允许自启动"</span>, <span class="keyword">true</span>))</span><br><span class="line">                    .addStep(StepHelper.checkStep(<span class="string">"允许关联启动"</span>, <span class="keyword">true</span>))</span><br><span class="line">                    .addStep(StepHelper.checkStep(<span class="string">"允许后台活动"</span>, <span class="keyword">true</span>))</span><br><span class="line">                    .addStep(StepHelper.clickStep(<span class="string">"确定"</span>))</span><br><span class="line">                    .addStep(StepHelper.backStep());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> assignment;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行任务示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssignmentFactory</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Activity activity, Queue&lt;AssignmentEntity&gt; queue)</span> </span>&#123;</span><br><span class="line">        L.i(<span class="string">"队列开始执行"</span>);</span><br><span class="line">        <span class="keyword">int</span> assignmentSize = queue.size();</span><br><span class="line"></span><br><span class="line">        CompositeDisposable co = <span class="keyword">new</span> CompositeDisposable();</span><br><span class="line">        Disposable subscribe = Observable.create(</span><br><span class="line">                (ObservableOnSubscribe&lt;AssignmentEntity&gt;) emitter -&gt; &#123;</span><br><span class="line">                    <span class="keyword">int</span> progressSize = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; assignmentSize; i++) &#123;</span><br><span class="line">                        AssignmentEntity entity = queue.poll();</span><br><span class="line">                        <span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            Queue&lt;StepEntity&gt; stepQueue = entity.getQueue();</span><br><span class="line">                            <span class="keyword">if</span> (stepQueue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                <span class="keyword">int</span> stepSize = stepQueue.size();</span><br><span class="line">                                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; stepSize; j++) &#123;</span><br><span class="line">                                    progressSize++;</span><br><span class="line">                                    emitter.onNext(entity);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//FloatWindowView.getInstance().progressBar.setMax(progressSize);</span></span><br><span class="line">                    emitter.onComplete();</span><br><span class="line">                &#125;)</span><br><span class="line">                .subscribeOn(Schedulers.io())<span class="comment">//执行在io线程</span></span><br><span class="line">                .observeOn(Schedulers.io())<span class="comment">//回调在io线程  //主线程阻塞将无法更新ui AndroidSchedulers.mainThread()</span></span><br><span class="line">                .subscribe(</span><br><span class="line">                        assignment -&gt; &#123;</span><br><span class="line">                            <span class="comment">//FloatWindowView.getInstance().progressAdd();</span></span><br><span class="line">                            <span class="comment">//L.i("当前进度：" + assignment.getName() + "===" + FloatWindowView.getInstance().getProgress());</span></span><br><span class="line">                            poll(activity, assignment.getQueue().poll());</span><br><span class="line">                        &#125;,</span><br><span class="line">                        throwable -&gt; L.e(<span class="string">""</span>, throwable),</span><br><span class="line">                        () -&gt; <span class="comment">//FloatWindowView.getInstance().stopFloatWindow()</span></span><br><span class="line">                );</span><br><span class="line">        co.add(subscribe);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">poll</span><span class="params">(Activity activity, StepEntity poll)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (poll == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">switch</span> (poll.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> StepEntity.TYPE_INTENT:<span class="comment">//跳转事件</span></span><br><span class="line">                activity.startActivity(poll.getIntent());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> StepEntity.TYPE_CLICK:<span class="comment">//点击事件</span></span><br><span class="line">                MyAccessibilityService.getInstance().clickFirstView(poll.getName());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> StepEntity.TYPE_CHECKED:<span class="comment">//选中事件</span></span><br><span class="line">                MyAccessibilityService.getInstance().clickCheckBox(poll.getName(), poll.isChecked());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> StepEntity.TYPE_BACK:<span class="comment">//返回事件</span></span><br><span class="line">                MyAccessibilityService.getInstance().goBack();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SystemClock.sleep(POST_DELAY_MILLIS);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p>完整demo：<a href="https://github.com/yooking-git/Accessibility.git">Github</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>想丶把代码写出诗意</category>
      </categories>
      <tags>
        <tag>Dev</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter踩坑日记</title>
    <url>/dev/200512-flutter.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ol>
<li><p>什么是Flutter</p>
<p>Flutter是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。    Flutter可以与现有的代码一起工作。在全世界，Flutter正在被越来越多的开发者和组织使用，并且Flutter是完全免费、开源的。<a id="more"></a></p>
</li>
<li><p>Flutter使用什么语言</p>
<p>dart语言</p>
</li>
<li><p>Dart的特点</p>
<p>基于 Dart 的特点：</p>
<ul>
<li>高效优秀的编程语言</li>
<li>丰富强大的框架</li>
<li>方便灵活的工具</li>
</ul>
<p>我们可以通过它在不同的设备上创作华丽的、高品质体验的应用</p>
</li>
</ol>
<h1 id="踩坑笔记"><a href="#踩坑笔记" class="headerlink" title="踩坑笔记"></a>踩坑笔记</h1><ol>
<li><p>Git与下载的区别</p>
<p><a href="https://flutterchina.club/setup-windows/#%E8%8E%B7%E5%8F%96flutter-sdk">官网</a>描述，让人头大。Git下载，安全无忧。</p>
<p>手动下载的FlutterSdk是没有灵魂的（没有 .git 文件的，需要手动生成）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 手动生成</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br></pre></td></tr></table></figure>

<p>而直接git clone到的就没有这个问题了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Flutter Sdk</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> -b stable https://github.com/flutter/flutter.git</span></span><br></pre></td></tr></table></figure>

<p>如果没有.git文件，在执行<code>flutter doctor</code>时会报错（此处没有截图）<br>执行<code>flutter doctor</code>时，大陆用户千万不要忘了配置环境变量（Windows为例 - 也可以手动添加）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">set</span> PUB_HOSTED_URL=https://pub.flutter-io.cn</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">set</span> FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>源自海外，长城警告</p>
<p>git clone 完 FllutterSdk - flutter.doctor也成功了 - Android Studio Plugins也加载完毕了，一切看似美好，Flutter的世界正在向我招手，flutter run！！！</p>
<p>1分钟：第一次加载嘛，应该要下载点东西，慢正常…<br>2分钟：第一次加载嘛，慢正常…<br>5分钟：慢挺正常的…</p>
<p>报错…emmm…</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//无法解决什么什么</span><br><span class="line">Could not resolve io.flutter:flutter_embedding_debug:1.0.0-540786dd51f112885a89792d678296b95e6622e5.</span><br><span class="line">//无法获取 https://storage.googleapis.com</span><br><span class="line">Could not get resource 'https://storage.googleapis.com/download.flutter.io/io/flutter/flutter_embedding_debug/1.0.0-540786dd51f112885a89792d678296b95e6622e5/flutter_embedding_debug-1.0.0-540786dd51f112885a89792d678296b95e6622e5.pom'</span><br></pre></td></tr></table></figure>

<p>下载sdk失败？那一定是你和世界隔了一堵墙，请：科学上网、合理爬梯——好孩子千万不要学！</p>
<p>当然，也可以用别人搭的瞭望塔看看世界。</p>
<ul>
<li>android/build.gradle</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">       <span class="comment">// google()</span></span><br><span class="line">       <span class="comment">// jcenter()</span></span><br><span class="line">        maven &#123; url <span class="string">'https://maven.aliyun.com/repository/google'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'https://maven.aliyun.com/repository/jcenter'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'http://download.flutter.io'</span> &#125;<span class="comment">//一般放在allprojects就行 - 对应 storage.googleapis.com </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:3.5.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">      <span class="comment">//  google()</span></span><br><span class="line">      <span class="comment">//  jcenter()</span></span><br><span class="line">        maven &#123; url <span class="string">'https://maven.aliyun.com/repository/google'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'https://maven.aliyun.com/repository/jcenter'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'http://download.flutter.io'</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>%FLUTTER_SDK_HOME%/packages/flutter_tools/gradle/flutter.gradle</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">      <span class="comment">//  google()</span></span><br><span class="line">      <span class="comment">//  jcenter()</span></span><br><span class="line">        maven &#123; url <span class="string">'https://maven.aliyun.com/repository/google'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'https://maven.aliyun.com/repository/jcenter'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public'</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'http://download.flutter.io'</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:3.5.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>&emsp;&emsp;之前在其他电脑上其实配置过一次Flutter（然后电脑送人了…），当时选择的是翻墙，一切过程走的很流畅，没啥坎坷的——我根本不觉得需要写个笔记记录。<br>&emsp;&emsp;这次在集团里想重新配置下，也不知道是不是Win10的锅（肯定不是），还是集团网络太差（不可能），也可能是命运吧总是颠沛流离…（手动滑稽）没翻墙真的是太难了！——集团翻墙会被网络安全部门警告！<br>&emsp;&emsp;玩Flutter的可能大概都是墙外生活的人，<code>maven { url &#39;http://download.flutter.io&#39; }</code>这句话真的是在度娘身上一阵猛翻才搜出来的。<br>&emsp;&emsp;如果有其他问题，欢迎评论区留言。</p>
]]></content>
      <categories>
        <category>想丶把代码写出诗意</category>
      </categories>
      <tags>
        <tag>Dev</tag>
        <tag>Flutter</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin初体验：IM项目体验</title>
    <url>/dev/190809-kotlin-IM.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><p>基于 Kotlin 和 AndroidX 及 WebSocket 的 IM 项目<a id="more"></a><br>本文主要以一个小Demo来初步了解Kotlin编程与Java编程的差异</p>
<h1 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h1><h2 id="聊天窗口构建"><a href="#聊天窗口构建" class="headerlink" title="聊天窗口构建"></a>聊天窗口构建</h2><p>框架引入：<a href="http://www.recyclerview.org/">BRVAH官网</a></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">'androidx.recyclerview:recyclerview:1.1.0-beta02'</span><span class="comment">//AndroidX RecyclerView</span></span><br><span class="line">implementation <span class="string">'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.46'</span><span class="comment">//BRVAH</span></span><br></pre></td></tr></table></figure>

<p><strong>new 对象</strong><br>在Kotlin中，<code>new Object();</code>省略为<code>Object()</code>，也不需要分号<br><strong>全局变量</strong><br><code>private lateinit var mContext: Context</code><br>全局变量应该用var来定义，其类型写在:之后<br>lateinit 修饰符：延迟初始化<br>lateinit 不能用来修饰基本数据类型，因为基本类型的属性在类加载后的准备阶段都会被初始化为默认值</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> a : <span class="built_in">Int</span></span><br><span class="line"><span class="comment">//'lateinit' modifier is not allowed on properties of primitive types</span></span><br></pre></td></tr></table></figure>

<p>lateinit 不能修饰val变量，只能修饰可变的属性</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">val</span> etMessage : AppCompatEditText</span><br><span class="line"><span class="comment">//'lateinit' modifier is allowed only on mutable properties</span></span><br></pre></td></tr></table></figure>

<p><strong>静态全局变量</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">	<span class="comment">//ChatActivity.class.getName()的写法</span></span><br><span class="line">	<span class="comment">//const 是常量修饰词 类似 java 中的 static final</span></span><br><span class="line">	<span class="comment">//val 相当于 final</span></span><br><span class="line">	<span class="comment">//const 不能修饰 var</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">val</span> TAG: String = ChatActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">name</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>符号</strong><br><code>helper!!</code>意为：helper不做为空校验，如果为空则抛出异常</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ? 即 或许为空</span></span><br><span class="line"><span class="comment">// ?. 相当于 if(object == null) return null; else return objcet.xx; </span></span><br><span class="line"><span class="keyword">val</span> mList: ArrayList&lt;String&gt;? = <span class="literal">null</span><span class="comment">//如果Object后面不加问号，即Object?那么mList = null会报错</span></span><br><span class="line">Log.d(TAG, <span class="string">"ListSize = <span class="subst">$&#123;mList?.size&#125;</span>"</span>)<span class="comment">//用 mList!!.size 会抛出空指针异常</span></span><br><span class="line">Log日志：com.yooking.socket.ChatActivity: ListSize = <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p><strong>构建javabean</strong></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatData</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> type: <span class="built_in">Int</span>) : MultiItemEntity &#123;</span><br><span class="line">	<span class="keyword">var</span> name: String? = <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对应的java写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatData</span> <span class="keyword">extends</span> <span class="title">MultiItemEntity</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">""</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatData</span><span class="params">(<span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在Kotlin中 get 方法 的使用方法为 chatData.name</span></span><br><span class="line"><span class="comment">//在Kotlin中 set 方法 的使用方法为 chatData.name = "string"</span></span><br></pre></td></tr></table></figure>



<h2 id="WebSocketLib构建"><a href="#WebSocketLib构建" class="headerlink" title="WebSocketLib构建"></a>WebSocketLib构建</h2><p>框架引入：<a href="https://square.github.io/okhttp/">OkHttp-GithubPage</a></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">api <span class="string">'com.squareup.okhttp3:okhttp:4.0.1'</span><span class="comment">//okhttp 4.0.1</span></span><br><span class="line"><span class="comment">//api 'com.squareup.okhttp3:mockwebserver:4.0.1'//okhttp moc 请求验证</span></span><br><span class="line">api <span class="string">'com.squareup.okhttp3:logging-interceptor:4.0.1'</span><span class="comment">//okhttp 请求日志</span></span><br></pre></td></tr></table></figure>

<p><strong>匿名内部类</strong><br>在kotlin中，匿名内部类和java中的差别不大</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> handler: Handler</span><br><span class="line"><span class="keyword">init</span>&#123;</span><br><span class="line">    handler = Handler &#123;<span class="comment">//it:Messag!</span></span><br><span class="line">        send(heartMessage)</span><br><span class="line">        it.target.sendEmptyMessageDelayed(WHAT_HEART, heartTime)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java</span></span><br><span class="line">handler = <span class="keyword">new</span> Handler()&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerMessage</span><span class="params">(Message msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">        send(heartMessage);</span><br><span class="line">        sendEmptyMessageDelayed(WHAT_HEART, heartTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>静态内部类</strong><br>由于handler调用外部方法容易造成内存泄漏，所以，静态内部类了解一下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">WithoutLeakHandler</span></span>(wsu:WebSocketUtils):Handler()&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">val</span> mWsu:WeakReference&lt;WebSocketUtils&gt; = WeakReference(wsu)</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">handleMessage</span><span class="params">(msg: <span class="type">Message</span>?)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.handleMessage(msg)</span><br><span class="line">            <span class="keyword">val</span> webSocketUtils = mWsu.<span class="keyword">get</span>()!!</span><br><span class="line">            webSocketUtils.send(webSocketUtils.heartMessage)</span><br><span class="line">            msg!!.target.sendEmptyMessageDelayed(WHAT_HEART, webSocketUtils.heartTime)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="具体实现请见Demo"><a href="#具体实现请见Demo" class="headerlink" title="具体实现请见Demo"></a>具体实现请见Demo</h1><p>聊天代码：<a href="https://github.com/yooking-git/DEMO-IM">Demo</a></p>
]]></content>
      <categories>
        <category>想丶把代码写出诗意</category>
      </categories>
      <tags>
        <tag>Dev</tag>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>五大浏览器与四大内核</title>
    <url>/dev/190924-browser.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="五大浏览器"><a href="#五大浏览器" class="headerlink" title="五大浏览器"></a>五大浏览器</h2><p>浏览器发展史上越不过的五座大山：IE、Opera、Safari、Firefox、Chrome<a id="more"></a></p>
<h3 id="Internet-Explorer"><a href="#Internet-Explorer" class="headerlink" title="Internet Explorer"></a>Internet Explorer</h3><ul>
<li><p><a href="https://en.wikipedia.org/wiki/Internet_Explorer">Internet Explorer</a><font size=1><em>WIKI</em></font></p>
</li>
<li><p>Internet Explorer（旧称 Microsoft Internet Explorer 和 Windows Internet Explorer，简称 IE 或 MSIE），是微软所开发的图形用户界面网页浏览器。自从1995年开始，内置在各个新版本的Windows作业系统作为默认的浏览器，也是微软Windows操作系统的一个组成部分。</p>
<p>值得一提的是 Windows 10 目前的默认浏览器为<a href="https://en.wikipedia.org/wiki/Microsoft_Edge">Microsoft Edge</a>。</p>
</li>
</ul>
<h3 id="Opera"><a href="#Opera" class="headerlink" title="Opera"></a>Opera</h3><ul>
<li><p><a href="https://en.wikipedia.org/wiki/Opera_(web_browser)">Opera</a><font size=1><em>WIKI</em></font></p>
</li>
<li><p>Opera是由Opera软件为个人计算机推出的网页浏览器，用于Microsoft Windows、macOS和Linux操作系统。</p>
<p>Opera软件为纳斯达克上市的挪威软件公司，其后被中国商人收购（2016年2月确定被奇虎360和昆仑万维收购），因此收购后出现许多信息安全争议，并在Opera 6.04之后的数个中文版，曾捆绑流氓软件3721上网助手。</p>
<p>Opera浏览器2013以后采用Blink排版引擎。以往的Opera版本曾采用Presto排版引擎，曾在FreeBSD系统上运行。</p>
<p>Opera的姊妹浏览器 – Opera Mobile、Opera Mini和Opera Coast – 可执行于Android、iOS、Windows Phone、Symbian、Maemo、Bada、BlackBerry和Windows Mobile等多种操作系统的设备，而Opera Mini可执行于支持Java ME功能的设备。</p>
</li>
</ul>
<h3 id="Safari"><a href="#Safari" class="headerlink" title="Safari"></a>Safari</h3><ul>
<li><p><a href="https://en.wikipedia.org/wiki/Safari_(web_browser)">Safari</a><font size=1><em>WIKI</em></font></p>
</li>
<li><p>Safari 浏览器是苹果公司所开发，并内置于macOS（前称OS X、Mac OS X）的网页浏览器。Safari 浏览器在2003年1月7日首度发行测试版，并从Mac OS X Panther开始成为Mac OS X的默认浏览器，也是iOS、iPadOS内置的默认浏览器。Windows版本的首个测试版在2007年6月11日推出，支持Windows XP、Windows Vista和Windows 7，并在2008年3月18日推出正式版，但苹果已于2012年7月25日停止开发Windows版的Safari 浏览器。</p>
<p>Safari 浏览器发行后的市占率不断攀升。2008年2月，TheCounter.com报告指Safari 浏览器的市占率为3.34%，而Net Applications则指其市占率为2.63%。其后市占率再从2009年1月的3.62%爬升至2011年4月的7.1%。在移动裝置平台，Net Applications表示</p>
<p>Safari 浏览器占有率为62.17%。</p>
<p>safari在斯瓦希里语为旅行，字源来自阿拉伯语同意词 سفرة （safra）。</p>
</li>
</ul>
<h3 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h3><ul>
<li><p><a href="https://en.wikipedia.org/wiki/Firefox">Firefox</a><font size=1><em>WIKI</em></font></p>
</li>
<li><p>Mozilla Firefox，通称Firefox，中文也通称火狐，是一个自由及开源的网页浏览器，由Mozilla基金会及其子公司Mozilla公司开发。Firefox支持Windows、macOS及Linux，其移动版支持Android及Firefox OS，这些版本的Firefox使用Gecko来排版网页，Gecko是一个运行当前与预期之网页标准的排版引擎，而在2015年发布的Firefox for iOS则非使用Gecko。</p>
<p>Firefox于2002年由Mozilla社群成员创建，当时叫做“Phoenix”，因为社群成员们想要一个独立的浏览器，而非Mozilla Application Suite这样的包。即使在测试阶段，Firefox也在测试者中颇为流行，并因其速度、安全性及扩展组件而受称赞。Firefox于2004年11月首次发布，并且9个月内下载量超过6000万，获取了巨大的成功，Internet Explorer的主导地位首次受到了挑战。Firefox被认为是Netscape Navigator的精神续作，因为Netscape于1998年被AOL收购前创建了Mozilla社群。</p>
<p>Firefox全球市占率为35％至40%，为全球第二流行的网页浏览器。Firefox在某些国家还是最流行的网页浏览器，如在萨摩亚、德国、厄立特里亚及古巴，Firefox市占率分别为61.05%、38.36%、79.39%及85.93%。据Mozilla统计，截至2014年12月，Firefox在全世界拥有10亿用户[22]。</p>
</li>
</ul>
<h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><ul>
<li><p><a href="https://en.wikipedia.org/wiki/Google_Chrome">Chrome</a><font size=1><em>WIKI</em></font></p>
</li>
<li><p>Google Chrome是由Google开发的免费网页浏览器。Chrome是化学元素“铬”的英文名称，过去也用Chrome称呼浏览器的外框。Chrome相应的开放源代码计划名为Chromium，而Google Chrome本身是非自由软件，未开放全部源代码。</p>
<p>Chrome代码是基于其他开放源代码软件所编写，包括Apple WebKit和Mozilla Firefox，并开发出称为“V8”的高性能JavaScript引擎。Google Chrome的整体发展目标是提升稳定性、速度和安全性，并创造出简单且有效率的用户界面。CNET旗下的Download.com网站评出的2008年6月最佳Windows应用程序，其中Google Chrome排名首位。</p>
<p>据StatCounter统计，截至2018年第一季度，Google Chrome在全球桌面浏览器中有66%的占有率。</p>
<p>Chrome 50结束了对Windows XP与Windows Vista系统的支持，这两个系统上的最后版本为49.0.2623.112。</p>
</li>
</ul>
<h2 id="四大内核"><a href="#四大内核" class="headerlink" title="四大内核"></a>四大内核</h2><p>四大内核有五个是常识</p>
<h3 id="Trident"><a href="#Trident" class="headerlink" title="Trident"></a>Trident</h3><ul>
<li><p><a href="https://en.wikipedia.org/wiki/Trident_(software)">Trident</a><font size=1><em>WIKI</em></font></p>
</li>
<li><p>代表作：IE</p>
<p>Trident（又称为MSHTML、IE内核），是微软的视窗操作系统（Windows）搭载的网页浏览器—Internet Explorer的排版引擎的名称，它的第一个版本随着1997年10月Internet Explorer第四版发布，之后不断的加入新的技术并随着新版本的Internet Explorer发布。在Internet Explorer第七版中，微软对Trident排版引擎做了的重大的变动，除了加入新的技术之外，并增加对网页标准的支持。尽管这些变动已经在相当大的程度上落后了其它的排版引擎，如Gecko、KHTML、Webkit及Presto。</p>
<p>除此之外，微软还有另一个网页浏览器排版引擎，称为Tasman，它是使用在“Internet Explorer for Mac”的排版引擎。相较于Trident，Tasman引擎对网页标准有较佳的支持。与普遍的看法相反的是，微软已经停止了Mac版本的Internet Explorer的开发，但Tasman的开发仍旧持续，新版本的Tasman引擎仍被应用在一些微软产品上，例如Office for Mac。</p>
<p><em>——编者按：四大内核剩下三个也是常识</em></p>
</li>
</ul>
<h3 id="Gecko"><a href="#Gecko" class="headerlink" title="Gecko"></a>Gecko</h3><ul>
<li><p><a href="https://en.wikipedia.org/wiki/Gecko_(software)">Gecko</a><font size=1><em>WIKI</em></font></p>
</li>
<li><p>代表作：Firefox，即火狐浏览器。</p>
<p>Gecko是一套自由及开放源代码、以C++编写的排版引擎，当前为Mozilla Firefox网页浏览器以及Mozilla Thunderbird电子邮件客户端等Mozilla基金会相关产品所使用。Gecko原本由网景通信公司开发，现在则由Mozilla基金会维护。</p>
<p>这套排版引擎提供了一个丰富的应用程序接口以供互联网相关的应用程序使用，例如：网页浏览器、HTML编辑器、客户端／服务器等等。虽然最初的主要使用对象为Netscape和Mozilla Firefox网页浏览器，但现在已有很多其他软件在使用这个排版引擎。Gecko是跨平台的，能在Microsoft Windows、Linux和Mac OS X等主要操作系统上运行。</p>
</li>
</ul>
<h3 id="Webkit"><a href="#Webkit" class="headerlink" title="Webkit"></a>Webkit</h3><ul>
<li><p><a href="https://en.wikipedia.org/wiki/WebKit">Webkit</a><font size=1><em>WIKI</em></font></p>
</li>
<li><p>代表作：Safari、Chrome</p>
<p>WebKit是一种用来让网页浏览器绘制网页的排版引擎。它被用于Apple Safari。其分支Blink被用于基于Chromium的网页浏览器，如：Opera与Google Chrome。</p>
<p>Webkit亦使用于Apple iOS、BlackBerry Tablet OS、Tizen及Amazon Kindle的默认浏览器。WebKit的C++应用程序接口提供了一系列的Class以在视窗上显示网页内容，并且实现了一些浏览器的特色，如用户链接点击、管理前后页面列表及近期历史页面等等。</p>
<p>WebKit的HTML及JavaScript代码源自KDE的KHTML及KJS库的一个分支，现已由KDE、Apple、Google、Nokia、Bitstream、BlackBerry及Igalia等独立开发。OS X、Windows、GNU/Linux以及其他类Unix系统操作系统，皆支持这个项目。2013年4月3日，Google宣布它创建了WebKit中WebCore组件的分支——Blink，Blink将用于新版Google Chrome与Opera。</p>
<p>WebKit的WebCore及JavaScriptCore组件使用GNU宽通用公共许可证，其他组件则采用BSD许可证。</p>
<p>截至2013年3月7日，Webkit商标已被苹果公司在美国专利及商标局注册为其商标。</p>
</li>
</ul>
<h3 id="Presto"><a href="#Presto" class="headerlink" title="Presto"></a><del>Presto</del></h3><ul>
<li><p><a href="https://en.wikipedia.org/wiki/Presto_(browser_engine)">Presto</a><font size=1><em>WIKI</em></font></p>
</li>
<li><p>代表作：Opera</p>
<p>Presto是一个由Opera Software开发的网页浏览器排版引擎，由Opera 7.0至12.18版本所使用。</p>
<p>Presto取代了旧版Opera 4至6版本使用的Elektra排版引擎，包括加入动态功能，例如网页或其部分可随着DOM及Script语法的事件而重新排版。Presto在推出后不断有更新版本推出，使不少错误得以修正，以及阅读JavaScript性能得以最优化。</p>
<p>2013年2月12日，Opera宣布将结束Presto引擎的开发，未来将以Webkit引擎为主。</p>
<p>2016年2月15日，传出Opera被收购的消息，同日Presto内核版Opera更新到12.18。</p>
</li>
</ul>
<h3 id="Blink"><a href="#Blink" class="headerlink" title="Blink"></a>Blink</h3><ul>
<li><p><a href="https://zh.wikipedia.org/wiki/Blink">Blink</a><font size=1><em>WIKI</em></font></p>
</li>
<li><p>代表作：Chrome、Opera、Microsoft Edge</p>
<p>Blink是一个由Google主导开发的开源浏览器排版引擎，Google计划将这个渲染引擎作为Chromium计划的一部分，并且在2013年4月的时候公布了这一消息。</p>
<p>这一渲染引擎是开源引擎WebKit中WebCore组件的一个分支，并且在Chrome（28及往后版本）、Opera（15及往后版本）、Yandex、Vivaldi等诸多浏览器中使用。Chrome的开发者由于希望在浏览器的开发上拥有更大的自由度，同时避免与上游冲突，更可透过移除Chrome没有使用的组件而简化自己的程序库，所以决定开发WebKit的分支版本。根据提交统计，Google自2009年年底以来一直是WebKit代码库的最大贡献者。</p>
<p>Blink的命名受到Netscape Navigator引入的Blink非标准元素启发。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>想丶把代码写出诗意</category>
      </categories>
      <tags>
        <tag>Study</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>鹭岛游记</title>
    <url>/travel/190508-travels-Xiamen.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="题记-——-写东西前不先骚一下怎么像样"><a href="#题记-——-写东西前不先骚一下怎么像样" class="headerlink" title="题记 —— 写东西前不先骚一下怎么像样"></a>题记 <font size=1>—— 写东西前不先骚一下怎么像样</font></h1><ul>
<li>游玩是，和什么样的人、看什么样的风景、谈什么样的话。当人不差而话投机，于是旅途愉快。</li>
<li>与风雨来，与风雨去。待时心潮澎湃忆往昔，见时平静泰然似昨日，去时不留，风雨相送。</li>
<li>有朋自吴地来，自榕城至鹭岛以待，当把酒言欢叙多年未见之情。</li>
<li>居狼外婆家而望山水，踏环岛南路以观海波</li>
<li>轻踩细沙不胜惬意，畅聊古今不胜欢喜</li>
<li>纵览厦大观其美，漫步芙蓉知其盛  <a id="more"></a></li>
</ul>
<h1 id="正文-——-想骚但是怎么也骚不动毕竟腿断了"><a href="#正文-——-想骚但是怎么也骚不动毕竟腿断了" class="headerlink" title="正文 —— 想骚但是怎么也骚不动毕竟腿断了"></a>正文 <font size=1>—— 想骚但是怎么也骚不动毕竟腿断了</font></h1><h2 id="Day1-2019-04-30"><a href="#Day1-2019-04-30" class="headerlink" title="Day1 2019.04.30"></a>Day1 2019.04.30</h2><p><strong>&emsp;天气：</strong> 雨<br><strong>&emsp;心情：</strong> 有那么点小激动</p>
<p>&emsp;&emsp;每一个故事的开端都是一波然后一折，然后两折，然后三四五六七八九折的，这个故事也没有例外。比如放假的前一天啊，就发生了那么一点波折——<br>&emsp;&emsp;老大：小黄啊，放假有什么计划没有？<br>&emsp;&emsp;我：世界那么大，我想去看看。<br>&emsp;&emsp;老大：世界那么大，我这有个大世面要让你见见呢！<br>&emsp;&emsp;我：老大，我有约了！<br>&emsp;&emsp;老大：那真是太可惜了，我们公司将要参加今年的“数字峰会”展览，能看到马化腾、李彦宏、张一鸣等等，算了，你走吧，出门记得带上电脑！<br>&emsp;&emsp;我：行吧。  </p>
<h2 id="Day2-2019-05-01"><a href="#Day2-2019-05-01" class="headerlink" title="Day2 2019.05.01"></a>Day2 2019.05.01</h2><p><strong>&emsp;天气：</strong> 大雨<br><strong>&emsp;心情：</strong> 极差</p>
<p>&emsp;&emsp;今日加班，并没有见到马李张。</p>
<h2 id="Day3-2019-05-02"><a href="#Day3-2019-05-02" class="headerlink" title="Day3 2019.05.02"></a>Day3 2019.05.02</h2><p><strong>&emsp;天气：</strong> <del>&emsp;小雨&emsp;</del>特大雨<br><strong>&emsp;心情：</strong> 懵批&gt;&gt;惬意</p>
<p>&emsp;&emsp;——不管怎么样，故事的小黄花总算开始飘动，虽然不是从出生那年就飘着，童年的荡秋千也没荡过，但是故事好歹有了开端，一切都是美好的，除了，（望天）雨水。<br>&emsp;&emsp;——我是大黄，现在是早上六点整，虽然天是灰蒙蒙的天，但我的心还是向着阳光，我相信我的诗与远方，面朝大海春暖花开！<br>&emsp;&emsp;——现在是早上十点二十分，动车还没开始开动，而我还没吃早餐，虽然已经晚点了，但这不重要，重要的是我向着我的目的地又前进了一步。<br>&emsp;&emsp;——中午十二点半，我已经到站了，虽然诗和远方依然飘着雨，但没事，我相信等会就会雨过天晴了，我看过天气预报了，有雨。但这不重要，重要的是我在金拱门吃上了金拱门套餐，虽然我不喜欢快餐，emmm…真香！<br>&emsp;&emsp;——下午一点半，抵达狼外婆啊不，小外婆的狼不是，小红帽的狼外婆家客栈ヽ(o_ _)o，咳，总之我到了。——雨未停，朋友未至，静坐喝茶，惬意。<br>&emsp;&emsp;时间煮净了雨水，朋友也到了。经年未见，杨先生依旧是一人一包一相机一个大肚便便。互相挥手招呼，上了楼，放了包，辞别房东，开始漫步环岛路，我，大黄，今天要走两万步！  </p>
<p>打卡：环岛南路 曾山10号 二分之一咖啡，的门口。<br>队如龙，人似蚁，我不挤！<br>即使坐山望海煮咖啡十分的惬意，emmm…我也不挤。<br>拍几张照片到此一游足矣。</p>
<pre><code>打卡：环岛南路 曾山10号 二分之一咖啡，的门口。
队如龙，人似蚁，我不挤！
即使坐山望海煮咖啡十分的惬意，emmm...我也不挤。
拍几张照片到此一游足矣。  </code></pre><p>&emsp;&emsp;“山间风情，隐有脱尘之意，终不如凡间烟火，吾不屑。不远便是曾厝垵，那里尽是人间繁华，当去品尝。”  </p>
<pre><code>打卡：曾厝垵
垵内熙熙车马喧，硬着头皮往里钻。
如果咖啡馆门口的队伍能称为长龙，那这里就是群龙乱舞了！
初来乍到可能是热闹、新鲜，可走了两步之后，就只剩热闹了。</code></pre><p>&emsp;&emsp;“此间风情虽有烟火味，但过于浓郁、也过于嘈乱，不如离去，前方便是沙滩，轻踩细沙看海，应该别有一番风味。”<br>&emsp;&emsp;于是顺着人行道向着海边走去，随意聊着与景致无关的话题，时而看看左右的风景——有人、有自然、有车流，没有旅游的意思，却有生活的淡雅。走至海边，入目的是：自行车道、步行道、小亭子、沿海沙滩，你希望的样子她都有。在这里，可以是三三两两的人聚在一起聊天看海、可以是小情侣挑个石头相互依偎互诉衷情、也可以是走累的行人坐在亭子下喝口椰汁缓口气、还可以是沙滩上挖土垒沙雕的少年郎，你能想到的样子她都有。惬意吧。也许是过于惬意了，调皮的天公吹起了风，降下了下雨，于是安静祥和的海滩添上了五颜六色的伞，依然惬意。五颜六色的伞下是形形色色的人，是依旧依偎的小情侣，是依旧沿海而行的路人，是为了建造城堡而不惧风雨的小孩，还有快步走去亭下躲雨的我们。依然看海，依然惬意，风雨下的海边并不会因为风雨而有变换。任性的厦门和任性的游客，不论天晴、不论下雨，都是一样的把握着原有的节奏。你能想到的浪漫，依然没少。<br>&emsp;&emsp;时间不等风雨停，而肚子不等我吃饭。细雨下，走回曾厝垵，点上沙茶面、烧肉粽，再来个海蛎煎，尝尝闽南的另一道风景——美食，这也是旅行的应有之意。<br>&emsp;&emsp;吃也饱了，天也黑了，环岛路的灯也亮起来了，夜间的海滩，应该会有另一种美景吧。emmm…没有，你想多了，就是在步行道上行走，就是去夜拍海浪，就是在沙滩上按摩脚底，就是为了凑够两万步，没错，我，大黄，今天走了两万四千一百五十步！<br>&emsp;<strong>后记：</strong></p>
<p>&emsp;&emsp;夜渐渐深，本以为一天的行程便结束了…脚上的历程是结束了，但民宿的特色却正在为我们展开，是的，独有的、与酒店不同的风味。进门后，房东便邀请我们一起吃茶，客随主便，咳，我先去洗个澡。<br>&emsp;&emsp;坐在茶桌前，自然是畅聊古今，互相吹牛捧场了。我们争论着诸如什么“人先是情感的动物，而后是高于动物的理性”、“思想究竟源于心，还是源于脑”等等发乎于生命的哲学，并在此过程中认识了来自江西的“警察蜀黍”沈娟和“霸气少女”龙莹晶。咳（正经脸），不出去走走，你永远认识不到新的女生的。  </p>
<h2 id="Day4-2019-05-03"><a href="#Day4-2019-05-03" class="headerlink" title="Day4 2019.05.03"></a>Day4 2019.05.03</h2><p><strong>&emsp;天气：</strong> 多云<br><strong>&emsp;心情：</strong> 不要问我心情，问就是腿断了</p>
<p>&emsp;&emsp;“昨日晡时出门，人定而歇，行有二万步，今日食时而出，当行四万步！”<br>&emsp;&emsp;雨后朝阳、微风，清新的气息扑面而来，这样的早晨就应该来上一碗豆浆、再配根油条、最好再有笼热乎的小笼包，然后斗个嘴，争执下“吃咸豆腐脑的都是异类”，舒坦。<br>&emsp;&emsp;昨天的环岛路毕竟风雨，没有伞的我们只能在亭下可怜巴巴的看着别人的惬意，心里终归有些不甘。于是人字拖、花裤衩，这样的沙滩才够味。抱歉，我忘了我没有人字拖，也没有花裤衩。于是拖孩、长裤，卷起裤腿，生活总要有仪式感。就这样，走上弯路的一天开始了。  </p>
<pre><code>打卡：塔头公交站延环岛南路步行至白城沙滩（预计三小时）</code></pre><p>&emsp;&emsp;路上的吹牛打屁、瞎谈乱说、以及规划下午的厦大攻略自不消多说。沿途风光和昨天白日差别也不大，就是“走在风中今天阳光，突然好温柔”，就是沙滩上的人更少了，“天的风光地的风光，尽在我眼中”——而这片风光就我们欣赏，我的相机里不会有奇奇怪怪的人了，emmm…舒坦。<br>&emsp;&emsp;行至白城沙滩附近，时间已经将近十一点，环岛路上的人越来越多，各种各样的贩夫走卒都在这里汇聚，嘈乱的画面定格下来是充满生活气息的风景。<br>&emsp;&emsp;瞧，打南面来了个喇嘛，啊不是，是俩带发修行的行脚僧，手里提了五串佛珠，腰里别着个二维码，见面就是“好久不见”——并伸出了手。我是一头雾水不得不伸手握上去，还不敢崩出一句：“你谁？”，只担心这人老了记忆衰退了，多伤人？嘿，谁曾想：“前世我们见过”。我却是不信前世，毕竟我今生的幸运怕是要百世修行、万载难得，而中华也就五千年。虽然个中想法万千，也只是崩出个“哦~？”，示意他继续表演，都是为了生存，大家都不容易。他看得出我的敷衍，但也不介意，出来混的，什么样人他肯定都遇到过，反正套路还是要继续的，“我是九华山的修行者，来自xxx寺，我看你面善，是我前世的有缘人，我记得你心肠软，优柔寡断，遇到事情难以决断”，听到这里，脑子里不自觉的浮现出曾经遇到过的抉择，啧啧，有点东西啊？姑且继续听听。没曾想“你今后做事应该果决一些，勇敢一些，不要怕，你眉上有痔，这是珍珠痔，一定会成才的，五年内，如果你能够坚持自己，做事果决，一定会有所成就的。但你心肠软，性淳朴，容易遇到有心计的人，千万要小心…”，就这么点？就开始灌鸡汤了？图就穷了？那亮匕首呢？果不其然，只见他从袖子里取出一串佛珠，“你我有缘，这是我在九华山开过光的，送给你了。我们呢是修行人，也借此向你讨个缘”。我：“告辞”！<br>&emsp;&emsp;在这位“修行者”拦住我的时候，他的同伴也拦住了杨先生，并成功向杨先生推了一串佛珠，杨先生为此支付了10块钱的缘分…emmm…他才是性淳朴的人。与杨先生探讨了下那位“修行者”为他面的相，与我颇为吻合，可见人以群分物以类聚？非也，可见所有的人，面对重大抉择的时候，终究畏畏缩缩，故而他们的套路才会更多的针对于所谓优柔寡断上。自我攻略，最为致命。<br>&emsp;&emsp;边走边逛边拍照，穿过白城沙滩，来到世贸大厦。于是饿了，觅食于小郡肝串串香。<br>&emsp;&emsp;(2019-07-18)忙碌了两个月，大黄终于想起了他的游记，他下定决心不鸽了。<br>&emsp;&emsp;(2019-08-02)又鸽了半个月…<br>&emsp;&emsp;时间也是匆匆，快节奏的生活基本找不到停留，即使有了停留，也不愿意留下回忆。我想：再不趁着有心，再不趁着有闲，将这篇文章写尽，我是真要忘了那位热心的学姐了。</p>
<pre><code>时间应退回五月二号，作为一个实际工作地址在厦门的人，对厦门如此不了解实属“可恶”
——我居然没有提早预订厦门大学的入场资格？
对厦门大学的印象依然固化在2013年的春天，那是...那说来话就长了。
言归正传，遇到问题解决问题，于是call了我的发小（厦大研究生）的电话：
“娃啊，这是你最后的几个月，哥哥来看你了...”
“我不在,我在梅山”
“明天喊个人接我进去”
“哦”
发小经过几番波折，请来了一位学姐（厦大博士）作为引路人，大致就这样。</code></pre><p>&emsp;&emsp;吃过午饭，拨通学姐电话，学姐是个急性子，标标准准东北人，性子直，说话也直，做事也直。</p>
<pre><code>学姐她：
言语间总是我发小这人...怎怎怎，却又不乏温柔。
嘴里总是忙忙忙，却也尽职尽责带我们游览厦大。
话里话外都是不情愿，热情起来却是道不尽。
一个有趣的人。</code></pre><p>&emsp;&emsp;厦大往哪走？事实上，时隔两个半月，我只还能记住天鹅湖与芙蓉隧道，天鹅湖得益于厦大黑天鹅，而芙蓉隧道因为美。长廊如画，画尽长廊。文艺范这里有，清新气息这里也不会少，汇集一个学校的浪漫，一笔笔竞赋于墙，静待观赏。<br>&emsp;&emsp;隧道尽头，道别厦大。<br>&emsp;&emsp;走罢厦大，已是人疲力乏，吃个沙茶面继续呀。——目标中山路<br>&emsp;&emsp;中山路就是一个颇具民国风情的商业街。月缓升，日渐落，红霞落满街，而流光追溢彩。下午五六点，应是最美时分。</p>
<pre><code>中山路是厦门现已保留较完整的展现近代历史风貌的旧城街区，
拥有小走马路、陈化成故居、中华第一圣堂等众多人文古迹。
南洋骑楼建筑、流光溢彩的LED夜景、琳琅满目的各色闽台特色小吃
和回响在小巷街坊间的古老南音，构成其与众不同的风格特色。
——源自百度百科</code></pre><p>&emsp;&emsp;游完中山路，已是夜深。掏出手机——40738步，目标达成，瘸。<br>&emsp;<strong>后记：</strong><br>&emsp;&emsp;不要问，问就是已经忘了…</p>
<pre><code>小黄笔记：
厦门大学需要提前2天在【U厦大】公众号上预订
节假日招待人数每日一万，分上午和下午两批
另：厦大学生可以带亲朋进入</code></pre><h2 id="Day5-2019-05-04"><a href="#Day5-2019-05-04" class="headerlink" title="Day5 2019.05.04"></a>Day5 2019.05.04</h2><p><strong>&emsp;天气：</strong> 阳光正好&emsp;<br><strong>&emsp;心情：</strong> 估计很心疼自己的jio </p>
<p>&emsp;&emsp;早早就抢了个鼓浪屿14点的船票、五大景点套票。（作为一个前一天已经磨破脚的我，也不知道哪里来的勇气敢再战鼓浪屿？？？）<br>&emsp;&emsp;早晨10点左右，早早就起了床，出门吃了个早饭。<br>&emsp;&emsp;早早就拿出扑克打了起来。——早？<br>&emsp;&emsp;消磨时间到12点，出门——厦门轮渡码头——建议上船后直奔二楼进vip间，抢个位置看风景。<br>&emsp;&emsp;入岛后，瞎逛，等本地居民刘同学来当导游。至16点，到某码头，等同旅店俩女生。继续瞎逛。入夜，回旅店，蹭房东的大餐。<br>&emsp;&emsp;全篇完…（极其敷衍）<br>&emsp;<strong>后记：</strong><br>&emsp;&emsp;写游记千万不要几个月后再写，记不住的！</p>
]]></content>
      <categories>
        <category>想丶把旅途画成色彩</category>
      </categories>
      <tags>
        <tag>Travels</tag>
      </tags>
  </entry>
  <entry>
    <title>项目开发-从零开始记账本</title>
    <url>/dev/191118-bookkeeping.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="大事记"><a href="#大事记" class="headerlink" title="大事记"></a>大事记</h1><h2 id="公司大事件"><a href="#公司大事件" class="headerlink" title="公司大事件"></a>公司大事件</h2><pre class='mermaid'>
    graph TB
    Company(甲方-乙方公司) -- 2019.11.11 --> 成立
    Company --- Project(项目)
    Company --- Human(人员)
    Human -- 2019.11.11 --> 任命
    Appoint[人员任命] --> PartyA(甲方) 
    PartyA --> All(全体成员)
    Appoint[人员任命] --> PartyB(乙方)
    PartyB -- PM --> PM(胖子)
    PartyB -- UI --> UI(花花)
    PartyB -- RD --> RD(yooking)
</pre>

<a id="more"></a>

<h2 id="项目时间轴"><a href="#项目时间轴" class="headerlink" title="项目时间轴"></a>项目时间轴</h2><pre class='mermaid'>
    graph TB
    Project2[项目时间轴] 
    Project2 --> P1[2019.11.11-项目立项]
    P1 --> P2[2019.11.11-确立目标]
    P2 --> P3[2019.11.11-第一份需求文档]
    P3 --> P4[2019.11.17-第一份产品文档]
    P4 --> P5[2019.11.19-第一份流程图]
    P5 --> P6[2019.11.19-项目代码构建]
</pre>

<h2 id="文档路径"><a href="#文档路径" class="headerlink" title="文档路径"></a>文档路径</h2><ul>
<li><p>第一份 <a href="https://i.loli.net/2020/04/30/uqCQAsbwjR67OVz.jpg">需求文档</a> 诞生</p>
</li>
<li><p>第一份 <a href="../../../../files/记账app文档.pdf">产品文档</a> 诞生</p>
</li>
<li><p>第一份 <a href="https://i.loli.net/2020/04/30/D4xlmPinYOuW9Lw.jpg">流程图</a> 诞生</p>
</li>
<li><p>前端项目创建：[github开源]</p>
</li>
</ul>
<h1 id="开发笔记"><a href="#开发笔记" class="headerlink" title="开发笔记"></a>开发笔记</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><h2 id="System-And-Software"><a href="#System-And-Software" class="headerlink" title="System And Software"></a>System And Software</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Windows 7/10</span><br><span class="line">Android Studio 3.4.2</span><br><span class="line">IDE/MyEclipse/Eclipse</span><br><span class="line">Java/Dart/H5</span><br></pre></td></tr></table></figure>

<!--### Android Settings

    project name: bookkeeping
    project package: com.yooking.bookkeeping
    project language: kotlin
    project mininum API:API19 - kitkat - Android 4.4
-->

<h2 id="开发规划"><a href="#开发规划" class="headerlink" title="开发规划"></a>开发规划</h2><ol>
<li>Flutter 多平台开发</li>
<li>Java 后台开发</li>
<li>前后端联动</li>
<li>公众号开发</li>
</ol>
<h2 id="开发进度"><a href="#开发进度" class="headerlink" title="开发进度"></a>开发进度</h2><pre class='mermaid'>
    graph TB
    Dev[开发进度] 
    Dev --> D1[2019.11.19-配置开发环境]
    D1 --> D2[2019.11.19-创建项目]
    D2 --> D3[2019.11.19-HelloWorld]
    D3 --> D4[2019.11.22-自定义日历页]
</pre>


<h2 id="开发详情"><a href="#开发详情" class="headerlink" title="开发详情"></a>开发详情</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>Android Studio 配置 Flutter 详细流程：</p>
<ul>
<li><p>1、引入 github 项目: /d/Flutter/ <code>$ git clone https://github.com/flutter/flutter.git</code></p>
</li>
<li><p>2、在引入 github 项目的同时，可同步操作：</p>
<ul>
<li>2.1、打开 Android Studio</li>
<li>2.2、点击 Configure</li>
<li>2.3、选择 Plugins</li>
<li>2.4、搜索 Dart 插件和 Flutter 插件并下载</li>
<li>2.5、关闭 Android Studio</li>
</ul>
</li>
<li><p>3、配置环境变量</p>
<ul>
<li>3.1、环境变量 Path = <code>D:\Flutter\flutter\bin</code></li>
<li>3.2、powershell 中执行 <code>flutter doctor</code>(报错1)</li>
</ul>
<p>报错1：<br>无法将“Unblock-File”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后重试。<br>所在位置 行:1 字符: 13</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Unblock-File &lt;&lt;&lt;&lt;  -Path 'D:\Flutter\flutter/bin/internal/update_dart_sdk.ps1</span><br><span class="line">'; &amp; 'D:\Flutter\flutter/bin/internal/update_dart_sdk.ps1'</span><br><span class="line"></span><br><span class="line">  + CategoryInfo          : ObjectNotFound: (Unblock-File:String) [], Comman</span><br><span class="line">    dNotFoundException</span><br><span class="line">  + FullyQualifiedErrorId : CommandNotFoundException</span><br><span class="line">    解决方案：</span><br><span class="line">    powershell升级至5.0并重启计算机即可</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><ul>
<li>1、Start a new Flutter project <img src="https://i.loli.net/2020/04/30/HqK3etgyh6VIFmA.png" alt="3.jpg"></li>
<li>2、Flutter Application <img src="https://i.loli.net/2020/04/30/hQY3BijdoJqSMb8.png" alt="4.jpg"></li>
<li>3、Project name <code>bookkeeping</code> <img src="https://i.loli.net/2020/04/30/oVl2KwqiHGQfhMv.png" alt="5.jpg"></li>
<li>4、Company domain <code>yooking.com</code> <img src="https://i.loli.net/2020/04/30/SQ1m9Kz2TgMqbF4.png" alt="6.jpg"></li>
</ul>
<h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><p>诸事开头，哈喽world </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Welcome to Flutter'</span>,</span><br><span class="line">      home: <span class="keyword">new</span> Scaffold(</span><br><span class="line">        appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">          title: <span class="keyword">new</span> Text(<span class="string">'Welcome to Flutter'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: <span class="keyword">new</span> Center(</span><br><span class="line">          child: <span class="keyword">new</span> Text(<span class="string">'Hello World'</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>界面效果:<br><img src="https://i.loli.net/2020/04/30/vzS8WPpVumBTAHe.png" alt="7.jpg"></p>
<h3 id="自定义日历页"><a href="#自定义日历页" class="headerlink" title="自定义日历页"></a>自定义日历页</h3><p>自定义日历页面备用:</p>
<ol>
<li><p><code>Column</code>:类似<code>LinearLayout</code>的<code>vertical</code>，自上而下布局</p>
</li>
<li><p><code>Row</code>:类似<code>LinearLayout</code>的<code>horizontal</code>，从左到右布局</p>
</li>
<li><p>日历应该是由数个方块构成，自上而下，每行7个方块，首先创建<code>StateFullWidget</code>:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> OnDayClickListener(DayModel model);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalendarWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">	<span class="keyword">final</span> MonthModel _monthModel;</span><br><span class="line">	<span class="keyword">final</span> OnDayClickListener onDayClickListener; <span class="comment">//点击事件回调</span></span><br><span class="line">	CalendarWidget(<span class="keyword">this</span>._monthModel, <span class="keyword">this</span>.onDayClickListener);</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@override</span></span><br><span class="line">	State&lt;StatefulWidget&gt; createState() =&gt; _CalendarWidgetState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p>日历整体布局使用<code>Column</code>布局，第一行（<code>Row</code>）为星期</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">double</span> screenWith = MediaQuery.of(context).size.width;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@param &#123;Object&#125; double screenW 屏幕宽度</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>屏幕宽度只有build后才能获取</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line">weekWidget(<span class="built_in">double</span> screenW) &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; titleList = &lt;<span class="built_in">String</span>&gt;[<span class="string">'日'</span>, <span class="string">'一'</span>, <span class="string">'二'</span>, <span class="string">'三'</span>, <span class="string">'四'</span>, <span class="string">'五'</span>, <span class="string">'六'</span>,];</span><br><span class="line">    <span class="built_in">List</span>&lt;Widget&gt; widgetList = [];</span><br><span class="line">    titleList.forEach((title) &#123;</span><br><span class="line">        widgetList.add(weekTitleItem(title, (screenW - <span class="number">40</span>) / <span class="number">7</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">        width: screenW - <span class="number">40</span>,</span><br><span class="line">        height: <span class="number">17</span>,</span><br><span class="line">        child: Row(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.spaceBetween,</span><br><span class="line">            children: widgetList,</span><br><span class="line">        ),</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@param &#123;Object&#125; String title 文字</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet"> * </span>@param &#123;Object&#125; double width 单个方框宽度</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line">weekTitleItem(<span class="built_in">String</span> title, <span class="built_in">double</span> width) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">        alignment: Alignment.center,</span><br><span class="line">        width: width,</span><br><span class="line">        child: Text(</span><br><span class="line">            title,</span><br><span class="line">            style: TextStyle(</span><br><span class="line">                color: ColorUtil.color(<span class="string">'757575'</span>),</span><br><span class="line">                fontSize: <span class="number">12</span>,</span><br><span class="line">            ),</span><br><span class="line">        ),</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二到第七行为日期：</p>
<p>5.1 计算本月[空白]天数 - 转换为计算本月1号是周几 其中周日为第一天</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">int</span> weekDay = TimeUtil.getDayOfWeek(</span><br><span class="line">        widget._monthModel.year, widget._monthModel.month, <span class="number">1</span>);</span><br><span class="line">    _emptyDay = weekDay == <span class="number">7</span> ? <span class="number">0</span> : weekDay;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.2 计算本月的日历长度（天） - 转换为获取本月最后一天为几号</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">    ...</span><br><span class="line">    _maxDayOfMonth = TimeUtil.getLastDayOfMonth(</span><br><span class="line">        widget._monthModel.year, widget._monthModel.month);</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.3 计算本月的日历实际长度：<code>int length = _emptyDay + _maxDayOfMonth;</code></p>
<p>5.4 计算本月的日历行数：<code>_rows = (length / 7).ceil();</code></p>
<p>5.5 将每日数据加入到日历列表中<code>widgetList</code>并转换为<code>Row</code>列表</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">dayWidget(<span class="built_in">int</span> year, <span class="built_in">int</span> month, BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">double</span> screenWith = MediaQuery.of(context).size.width;</span><br><span class="line">    <span class="built_in">List</span>&lt;Widget&gt; widgetList = &lt;Widget&gt;[];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= _emptyDay; i++) &#123;</span><br><span class="line">        widgetList.add(emptyDayItem(context));</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= _maxDayOfMonth; i++) &#123;</span><br><span class="line">        widgetList.add(</span><br><span class="line">            dayItem(</span><br><span class="line">                <span class="keyword">new</span> DayModel(TimeUtil.getDate(year, month, i)),</span><br><span class="line">                context</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="built_in">List</span>&lt;Row&gt; rowList = &lt;Row&gt;[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;_rows;i++)&#123;<span class="comment">//每7天为一行</span></span><br><span class="line">        <span class="built_in">int</span> min = i*<span class="number">7</span>;</span><br><span class="line">        <span class="built_in">int</span> max = i+<span class="number">1</span> == _rows? widgetList.length:(i+<span class="number">1</span>)*<span class="number">7</span>;</span><br><span class="line">        rowList.add(Row(</span><br><span class="line">            children: widgetList.sublist(min,max),</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">        width: screenWith - <span class="number">40</span>,</span><br><span class="line">        height: <span class="number">52.0</span> * _rows,</span><br><span class="line">        child: Column(</span><br><span class="line">            children: rowList,</span><br><span class="line">        ),</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dayItem(DayModel model, BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">double</span> screenWith = MediaQuery.of(context).size.width;</span><br><span class="line">    <span class="built_in">double</span> singleW = (screenWith - <span class="number">40</span>) / <span class="number">7</span>;</span><br><span class="line">    <span class="built_in">String</span> dayTitle = model.dateTime.day.toString();</span><br><span class="line">    <span class="built_in">bool</span> isAfterToday = model.dateTime.isAfter(<span class="built_in">DateTime</span>.now());<span class="comment">//是否日期在今日之后</span></span><br><span class="line">    <span class="built_in">bool</span> isNoPay = model.pay == <span class="number">0</span>;<span class="comment">//是否无花销</span></span><br><span class="line">    <span class="keyword">return</span> GestureDetector(</span><br><span class="line">        onTap: () &#123;</span><br><span class="line">            <span class="keyword">if</span>(isAfterToday||isNoPay) <span class="keyword">return</span>;</span><br><span class="line">            dayClick(model);<span class="comment">//点击事件</span></span><br><span class="line">        &#125;,</span><br><span class="line">        child: Stack(</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">                Container(</span><br><span class="line">                    width: singleW,</span><br><span class="line">                    height: <span class="number">52</span>,</span><br><span class="line">                    alignment: Alignment.center,</span><br><span class="line">                    child: Text(</span><br><span class="line">                        dayTitle,</span><br><span class="line">                        textAlign: TextAlign.center,</span><br><span class="line">                        style: TextStyle(</span><br><span class="line">                            color: isAfterToday||</span><br><span class="line">                            	isNoPay ? ColorUtil.color(<span class="string">'BDBDBD'</span>): ColorUtil.color(<span class="string">'212121'</span>),</span><br><span class="line">                            fontSize: <span class="number">15</span>,</span><br><span class="line">                        ),</span><br><span class="line">                    ),</span><br><span class="line">                ),</span><br><span class="line">            ],</span><br><span class="line">        ),</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">emptyDayItem(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">double</span> screenWith = MediaQuery.of(context).size.width;</span><br><span class="line">    <span class="built_in">double</span> singleW = (screenWith - <span class="number">40</span>) / <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">        width: singleW,</span><br><span class="line">        height: <span class="number">52</span>,</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.6 将所有<code>Row</code>放入<code>Column</code>中排列</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">        width: screenWith,</span><br><span class="line">        height: <span class="number">24.0</span> + <span class="number">17.0</span> + <span class="number">13</span> + _rows * <span class="number">52.0</span>  ,</span><br><span class="line">        child: Column(</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">                SizedBox(</span><br><span class="line">                    height: <span class="number">24</span>,</span><br><span class="line">                ),</span><br><span class="line">                weekWidget(screenWith),</span><br><span class="line">                SizedBox(</span><br><span class="line">                    height: <span class="number">13</span>,</span><br><span class="line">                ),</span><br><span class="line">                dayWidget(widget._monthModel.year, widget._monthModel.month, context),</span><br><span class="line">            ],</span><br><span class="line">        ),</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.7 赋予日历点击事件</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">dayClick(DayModel model) &#123;</span><br><span class="line">    widget.onDayClickListener(model);</span><br><span class="line">    setState(() &#123;&#125;);<span class="comment">//刷新当前页面（即整个CalendarWidget的build）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>CalendarPage</code>中调用<code>CalendarWidget</code>并添加滑动事件</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalendarPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    State&lt;StatefulWidget&gt; createState() =&gt; _CalendarPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_CalendarPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">CalendarPage</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> maxYear = <span class="built_in">DateTime</span>.now().year;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> maxMonth = <span class="built_in">DateTime</span>.now().month;</span><br><span class="line">    MonthModel _monthModel = <span class="keyword">new</span> MonthModel(maxYear, maxMonth);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    Widget build(BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">final</span> data = MediaQuery.of(context);</span><br><span class="line">        <span class="keyword">final</span> screenHeight = data.size.height;</span><br><span class="line">        <span class="keyword">final</span> screenWidth = data.size.width;</span><br><span class="line">        <span class="comment">//获取当前日期作为标题</span></span><br><span class="line">        <span class="built_in">num</span> dx,dy;</span><br><span class="line">        <span class="keyword">return</span> Scaffold(</span><br><span class="line">            appBar: <span class="keyword">new</span> AppBar(</span><br><span class="line">                title: <span class="keyword">new</span> Text(<span class="string">"<span class="subst">$&#123;_monthModel.year&#125;</span>.<span class="subst">$&#123;_monthModel.month&#125;</span>"</span>),</span><br><span class="line">            ),</span><br><span class="line">            body: Listener(</span><br><span class="line">                onPointerDown: (event)&#123;<span class="comment">//监听按下</span></span><br><span class="line">                    dx = event.position.dx;</span><br><span class="line">                &#125;,</span><br><span class="line">                onPointerUp: (event)&#123;<span class="comment">//监听抬起</span></span><br><span class="line">                    <span class="built_in">num</span> delX = event.position.dx - dx;</span><br><span class="line">                    <span class="built_in">num</span> delY = event.position.dy - dy;</span><br><span class="line">                    <span class="keyword">if</span>((delX / delY).abs() &lt; <span class="number">2.7</span> ) <span class="keyword">return</span>;<span class="comment">//cot 20°≈ 2.7 cot越小，角度越大</span></span><br><span class="line">                    <span class="keyword">if</span>(delX &gt; <span class="number">50</span>) updateMonth(<span class="number">-1</span>);<span class="comment">//左滑则月份-1</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(delX &lt; <span class="number">-50</span>) updateMonth(<span class="number">1</span>);<span class="comment">//右滑则月份+1</span></span><br><span class="line">                &#125;,</span><br><span class="line">                child: Container(</span><br><span class="line">                    height: screenHeight,</span><br><span class="line">                    width: screenWidth,</span><br><span class="line">                    color: Colors.white,</span><br><span class="line">                    padding: <span class="keyword">const</span> EdgeInsets.symmetric(horizontal: <span class="number">10.0</span>, vertical: <span class="number">10.0</span>),</span><br><span class="line">                    alignment: Alignment.topCenter,</span><br><span class="line">                    child: <span class="keyword">new</span> CalendarWidget(</span><br><span class="line">                        _monthModel,</span><br><span class="line">                        (dayModel) &#123;<span class="comment">//每日点击事件</span></span><br><span class="line">                            <span class="comment">//todo:打开详情页面</span></span><br><span class="line">                            MyToast().showToast(TimeUtil.formatDate(dayModel.dateTime) +</span><br><span class="line">                                <span class="string">"花费了"</span> +</span><br><span class="line">                                dayModel.pay.toString() +</span><br><span class="line">                                <span class="string">"元"</span>);</span><br><span class="line">                        &#125;,</span><br><span class="line">                    ),</span><br><span class="line">                )</span><br><span class="line">            ),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    updateMonth(changeMonth)&#123;</span><br><span class="line">        _monthModel.month += changeMonth;</span><br><span class="line">        <span class="keyword">if</span>(_monthModel.month &gt; <span class="number">12</span>)&#123;</span><br><span class="line">            _monthModel.month -= <span class="number">12</span>;</span><br><span class="line">            _monthModel.year ++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(_monthModel.month &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            _monthModel.month += <span class="number">12</span>;</span><br><span class="line">            _monthModel.year --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(TimeUtil.getDate(_monthModel.year, _monthModel.month, <span class="number">1</span>)</span><br><span class="line">            .isAfter(<span class="built_in">DateTime</span>.now())) &#123;</span><br><span class="line">            <span class="comment">//不可超过本月</span></span><br><span class="line">            _monthModel.year = maxYear;</span><br><span class="line">            _monthModel.month = maxMonth;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        setState(() &#123;&#125;);<span class="comment">//刷新当前build</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果演示<br><img src="https://i.loli.net/2020/04/30/T37HXri18xBtsIh.png" alt="8.jpg"></p>
</li>
</ol>
<!--## 开发进度
网络请求: [Retrofit](https://github.com/square/retrofit)
事件发布-订阅总线: [EventBus](https://github.com/greenrobot/EventBus)
recyclerview: [BRVAH](http://www.recyclerview.org/)

### 2019.11.18 HelloWorld 
1.Start A New Android Studio project
![](../../../../imgs/从零开始记账本/2.jpg)
2.Configure Project
![](../../../../imgs/从零开始记账本/3.jpg)-->

<!--1.记录支出、收益
    记录后自动累计当天金额
    并且可以选择付款途径，是花呗 余额 银行卡或者其它
    例：
    用户：2019.11.11 00:07 支出66元（花呗）
    用户：2019.11.11 00:35 支出44元（花呗）
    系统小字：2019.11.11累计已支出110元（花呗）
    2.可以预设每月生活支出预算，但非必填，有明显图标可以选择跳过
    3.背景图案可导入手机相册照片（参考手机qq皮肤设置，多个界面各自导入照片做背景）
    4.每周生成一副支出金额曲线图，支出类别占比饼状图
    4.1用户可以预设“非必要支出”项目类型，比如嚯奶茶之类的支出，在统计界面标明支出占比
    5.大致三个界面，从左到右
    记录→统计→用户界面
    5.1记录界面，参考各大记账app；用户自定义增加分类，可隐藏不常用分类，分类项目可以搜索
    5.2统计界面：周支出（收入）曲线图，支出金额占比曲线图，非必要支出占比，月日历（日期下方显示支出/收入金额-有按钮可以选择切换是显示支出，还是显示收入）
    6.设有花呗 信用卡还款日期提示-->]]></content>
      <categories>
        <category>想丶把代码写出诗意</category>
      </categories>
      <tags>
        <tag>Dev</tag>
        <tag>Dart</tag>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
